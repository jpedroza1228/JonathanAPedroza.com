{
  "hash": "e70dbd1a6c735ec359510f75d437f42b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bayes Nets\" \nsubtitle: |\n  Quick Introduction\nimage: /posts/2024-03-09-bayesian-networks-pt-1/network_playground.jpg\ncategories: [bayesian, bayesian network, bayes net, R, stan, cmdstanr]\ndate: 2024-07-09\n# citation:\n  # url: \nparams:\n  slug: Bayes-Net-part-1\n  date: 2024-07-09\n---\n\n\n**As I am continuing to grow in understanding and conducting bayesian networks, this page and series may change in the future. -JP**\n\nOkay, I will be the first to state that I am not an expert in the field of conducting psychometric models, Bayesian networks, Bayesian analyses, **but** I have been struggling to find any blog posts about conducting a bayes net with latent variables that uses the programming language [Stan](https://mc-stan.org/). The purpose of this post is to walk through Stan and some bayes net terminology to get a basic understanding of some psychometric models conducting using Bayesian inference. \n\nTo get started, make sure you follow the detailed instructions on installing [RStan](https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started). I know if using Mac, make sure to also download Xcode so that Stan will work correctly. For this post, I will be doing all my programming in R, while calling on Stan to conduct the Markov Chain Monte Carlo (MCMC) sampling. Maybe a future post will follow this tutorial using PyStan or Cmdstanpy but there are just more readily available tools using R so I will be using R instead. Additionally, I will be creating dichotomous data that will represent an education assessment where a 1 indicates that a student has answered the item correctly and a 0 indicates they did not answer the item correctly. The model will also include three latent attributes/skills/variables where a 1 would indicate that the student has mastered the skill and a 0 would indicate that they do not have mastery of the skill. \n\nWhile I will be discussing bayes net through an educational measurement lens, bayes net can be used outside of education to show that individuals have skills that are not directly measured. Instead of items on an assessment, tasks that capture each skill can be assessed. Before walking through some bayes net terminology, it is important to note that this model is simply for educational purposes. Components of the psychometric models I will be writing about (e.g., Diagnostic Classification Model (DCMs) and bayes net) require expert opinion. For example, DCMs and bayes net models require expert opinions on the assignment of items to skills. Additionally, bayes net models require expert opinion on the priors for the lambda ($\\lambda$) parameters. \n\nSince there is different opinions on using different terms, I am going to stick to the following terms.\n\n- Node = Observed variable\n- Parent = The node that has an arrow directed at another node\n- Child = The node that the arrow is directed at from another node\n- Edge = Path/arrow between two nodes\n- Attribute/Skill = Latent (unobserved/hidden) node\n- DAG = Directed Acyclic Graph (visual representation of nodes [similar to path analysis in visualization])\n- Q-matrix = A matrix showing the relationship between the assessment items and each attribute/skill, with each row being an item and each column being a skill. \n\nFor this introductory post into bayes net, I thought it would be best to create some artificial data and show visually the models I will be planning on creating using R and Stan. I will be using *cmdstanr* instead of *rstan* for my *Stan* computations. The main difference between the two packages is that rstan avoids using R6 classes, while cmdstanr uses R6 classes. If you'd like more information on trade-offs of different object-oriented programming classes, you can read more [here](https://adv-r.hadley.nz/oo-tradeoffs.html). Finally, I will state that while this is introductory to a bayes net model, this post assumes that you have a decent understanding of Bayesian inference.\n\n# Getting the Data Set Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(cmdstanr)\nlibrary(bayesplot)\nlibrary(posterior)\nlibrary(ggdag)\nlibrary(dagitty)\n\nset.seed(12345)\nbern_dist <- function(prob_value)(\n  rbinom(n = 300, size = 1, prob = prob_value)\n)\n\ny <- tibble(\n  y1 = bern_dist(prob = .7),\n  y2 = bern_dist(prob = .74),\n  y3 = bern_dist(prob = .88),\n  y4 = bern_dist(prob = .90),\n  y5 = bern_dist(prob = .64),\n  y6 = bern_dist(prob = .61),\n  y7 = bern_dist(prob = .79),\n  y8 = bern_dist(prob = .89),\n  y9 = bern_dist(prob = .81),\n  y10 = bern_dist(prob = .54),\n  y11 = bern_dist(prob = .60),\n  y12 = bern_dist(prob = .46),\n  y13 = bern_dist(prob = .37),\n  y14 = bern_dist(prob = .3),\n  y15 = bern_dist(prob = .65),\n) |>\n  rowid_to_column() |>\n  rename(\n    studentid = rowid\n  )\n```\n:::\n\n\nThe first thing I am going to do is load in all the necessary libraries that you need. Then I decided to create a function that would create a binomial distribution with a single trial, so essentially a bernoulii distribution. I decided on some random numbers for the probabilities of correct responses to the 15 different items and decided to create some fake studentids for each row. Below is a table to look into the data if you want.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-6dd9214dc6b75f2a6bc2\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6dd9214dc6b75f2a6bc2\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"studentid\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300],\"y1\":[0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,0,1,0,1,1,1],\"y2\":[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0],\"y3\":[1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],\"y4\":[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],\"y5\":[1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1],\"y6\":[0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1],\"y7\":[1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1],\"y8\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1],\"y9\":[1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"y10\":[1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1],\"y11\":[1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0],\"y12\":[0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0],\"y13\":[1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0],\"y14\":[1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0],\"y15\":[0,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0]},\"columns\":[{\"id\":\"studentid\",\"name\":\"studentid\",\"type\":\"numeric\"},{\"id\":\"y1\",\"name\":\"y1\",\"type\":\"numeric\"},{\"id\":\"y2\",\"name\":\"y2\",\"type\":\"numeric\"},{\"id\":\"y3\",\"name\":\"y3\",\"type\":\"numeric\"},{\"id\":\"y4\",\"name\":\"y4\",\"type\":\"numeric\"},{\"id\":\"y5\",\"name\":\"y5\",\"type\":\"numeric\"},{\"id\":\"y6\",\"name\":\"y6\",\"type\":\"numeric\"},{\"id\":\"y7\",\"name\":\"y7\",\"type\":\"numeric\"},{\"id\":\"y8\",\"name\":\"y8\",\"type\":\"numeric\"},{\"id\":\"y9\",\"name\":\"y9\",\"type\":\"numeric\"},{\"id\":\"y10\",\"name\":\"y10\",\"type\":\"numeric\"},{\"id\":\"y11\",\"name\":\"y11\",\"type\":\"numeric\"},{\"id\":\"y12\",\"name\":\"y12\",\"type\":\"numeric\"},{\"id\":\"y13\",\"name\":\"y13\",\"type\":\"numeric\"},{\"id\":\"y14\",\"name\":\"y14\",\"type\":\"numeric\"},{\"id\":\"y15\",\"name\":\"y15\",\"type\":\"numeric\"}],\"filterable\":true,\"searchable\":true,\"highlight\":true,\"dataKey\":\"d93c8f63e08e8bf60651b58353c274e7\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## Q Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq_matrix <- tibble(\n  item_id = map_chr(1:15, ~paste0(\"y\", .x)),\n  att1 = c(1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0),\n  att2 = c(0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0),\n  att3 = c(0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1)\n) \n\nq_matrix |>\n  react_table()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-4898d44123ad0bd17844\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4898d44123ad0bd17844\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"item_id\":[\"y1\",\"y2\",\"y3\",\"y4\",\"y5\",\"y6\",\"y7\",\"y8\",\"y9\",\"y10\",\"y11\",\"y12\",\"y13\",\"y14\",\"y15\"],\"att1\":[1,0,0,1,0,0,1,0,0,1,0,0,1,0,0],\"att2\":[0,1,0,0,1,0,0,1,0,0,1,0,0,1,0],\"att3\":[0,0,1,0,0,1,0,0,1,0,0,1,0,0,1]},\"columns\":[{\"id\":\"item_id\",\"name\":\"item_id\",\"type\":\"character\"},{\"id\":\"att1\",\"name\":\"att1\",\"type\":\"numeric\"},{\"id\":\"att2\",\"name\":\"att2\",\"type\":\"numeric\"},{\"id\":\"att3\",\"name\":\"att3\",\"type\":\"numeric\"}],\"filterable\":true,\"searchable\":true,\"highlight\":true,\"dataKey\":\"d954286731463706aecd2c553c2e40a1\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nOkay, now on to the Q-matrix. As previously stated, I am creating this q-matrix to be as simple as possible. This means that in a realistic scenario, you would either want to use a structural learning algorithm to see what nodes have edges to our three latent nodes, or you should probably have experts on your latent attributes to declare what items measure what latent attribute.\n\nAbove, I created a q-matrix that follows a pattern where each attribute has 5 items that correspond to that attribute. The table above allows you to search which items correspond to each attribute by typing `1` into the filter bar above each column. \n\n## Attribute Profile Matrix\n\nIf we only wanted to examine how the posterior distributions compare to each student and their responses, then I would only need to have my student data and the Q-matrix. However, I also want to put students into latent classes. Because I want to put students into latent classes, I also have to create an attribute profile matrix. I am going to create this matrix by creating every possible combination of skills, which will create every potential latent class. Then I will just add each row as a numbered class. Below is the final matrix created for 3 skills. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nskills <- 3\nskill_combo <- rep(list(0:1), skills)\nalpha <- expand.grid(skill_combo)\n\nalpha <- alpha |>\n  rename(\n    att1 = Var1,\n    att2 = Var2,\n    att3 = Var3\n  ) |>\n  mutate(\n    class = seq(1:nrow(alpha)),\n    .before = att1\n  )\n\nalpha |> react_table()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-2502e864885c5075fec9\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2502e864885c5075fec9\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"class\":[1,2,3,4,5,6,7,8],\"att1\":[0,1,0,1,0,1,0,1],\"att2\":[0,0,1,1,0,0,1,1],\"att3\":[0,0,0,0,1,1,1,1]},\"columns\":[{\"id\":\"class\",\"name\":\"class\",\"type\":\"numeric\"},{\"id\":\"att1\",\"name\":\"att1\",\"type\":\"numeric\"},{\"id\":\"att2\",\"name\":\"att2\",\"type\":\"numeric\"},{\"id\":\"att3\",\"name\":\"att3\",\"type\":\"numeric\"}],\"filterable\":true,\"searchable\":true,\"highlight\":true,\"dataKey\":\"aac5231724d03be73e309467adffc69a\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n**Note: Latent classes are different from our latent nodes/attributes/skills. The matrix created above (`alpha`) is a matrix where each row is a different latent class and each column corresponds to each of the skills.**\n\n\nSo now we have everything to build our bayes net model. Before we get to that, I do want to visually show the three models I will be creating in this series.\n\n# Models\n\n## Naive Bayes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_dag <- dagitty('dag {\nbb=\"0,0,1,1\"\n\"1 - lambda1\" [latent,pos=\"0.175,0.076\"]\n\"Q-matrix\" [pos=\"0.874,0.402\"]\natt1 [latent,pos=\"0.220,0.209\"]\natt2 [latent,pos=\"0.488,0.182\"]\natt3 [latent,pos=\"0.709,0.169\"]\ndelta [latent,pos=\"0.481,0.421\"]\nfalse_positive [latent,pos=\"0.572,0.888\"]\nlambda1 [latent,pos=\"0.252,0.082\"]\nlambda20 [latent,pos=\"0.450,0.076\"]\nlambda21 [latent,pos=\"0.522,0.081\"]\nlambda30 [latent,pos=\"0.679,0.068\"]\nlambda31 [latent,pos=\"0.741,0.069\"]\ntrue_positive [latent,pos=\"0.380,0.890\"]\ny1 [pos=\"0.124,0.652\"]\ny10 [pos=\"0.240,0.653\"]\ny11 [pos=\"0.511,0.648\"]\ny12 [pos=\"0.770,0.645\"]\ny13 [pos=\"0.276,0.654\"]\ny14 [pos=\"0.544,0.646\"]\ny15 [pos=\"0.814,0.643\"]\ny2 [pos=\"0.403,0.649\"]\ny3 [pos=\"0.658,0.657\"]\ny4 [pos=\"0.164,0.652\"]\ny5 [pos=\"0.442,0.648\"]\ny6 [pos=\"0.693,0.652\"]\ny7 [pos=\"0.200,0.653\"]\ny8 [pos=\"0.476,0.647\"]\ny9 [pos=\"0.732,0.648\"]\n\"1 - lambda1\" -> att1\n\"Q-matrix\" -> delta\natt1 -> delta\natt2 -> delta\natt3 -> delta\ndelta -> y1\ndelta -> y10\ndelta -> y11\ndelta -> y12\ndelta -> y13\ndelta -> y14\ndelta -> y15\ndelta -> y2\ndelta -> y3\ndelta -> y4\ndelta -> y5\ndelta -> y6\ndelta -> y7\ndelta -> y8\ndelta -> y9\nfalse_positive -> y1\nfalse_positive -> y10\nfalse_positive -> y11\nfalse_positive -> y12\nfalse_positive -> y13\nfalse_positive -> y14\nfalse_positive -> y15\nfalse_positive -> y2\nfalse_positive -> y3\nfalse_positive -> y4\nfalse_positive -> y5\nfalse_positive -> y6\nfalse_positive -> y7\nfalse_positive -> y8\nfalse_positive -> y9\nlambda1 -> att1\nlambda20 -> att2\nlambda21 -> att2\nlambda30 -> att3\nlambda31 -> att3\ntrue_positive -> y1\ntrue_positive -> y10\ntrue_positive -> y11\ntrue_positive -> y12\ntrue_positive -> y13\ntrue_positive -> y14\ntrue_positive -> y15\ntrue_positive -> y2\ntrue_positive -> y3\ntrue_positive -> y4\ntrue_positive -> y5\ntrue_positive -> y6\ntrue_positive -> y7\ntrue_positive -> y8\ntrue_positive -> y9\n}\n')\n\nggdag(naive_dag) + theme_dag()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe first model I will go over is essentially a naive bayes model; however, naive bayes models do not correct for what I have labeled as true positive and false positive probabilities. These are priors that will be discussed in the next post. This model mimics a deterministic inputs, noisy \"and\" gate (DINA) model. Essentially, the model assumes that each student has mastered all skills in order to correctly respond to an assessment item. See [here](https://mc-stan.org/documentation/case-studies/dina_independent.html) for an excellent post about the DINA model and what the bayes netmodel will compare to in this series\n\n## DCM\n\nThe DCM is somewhat difficult to visualize. Based on the model in the blog post above, the skills are not determined by priors and instead of a delta parameter, the parameter is already created in the data. I will talk shortly about that when conducting the DCM. Additionally, while the other two models have priors for `true positives` and `false positives`, the DCM includes similar parameters with prior distributions; the slip (essentially the student slipped up and made a mistake even though they have the skills) parameter and the guess (got the answer correctly but do not have the necessary skills) parameter. Those priors are different from the ones created for the bayes net models so we'll talk about those next post.\n\n## Bayes Net\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbayes_net <- dagitty('dag {\nbb=\"0,0,1,1\"\n\"1 - lambda1\" [latent,pos=\"0.175,0.076\"]\n\"Q-matrix\" [pos=\"0.874,0.402\"]\natt1 [latent,pos=\"0.220,0.209\"]\natt2 [latent,pos=\"0.488,0.182\"]\natt3 [latent,pos=\"0.709,0.169\"]\ndelta [latent,pos=\"0.481,0.421\"]\nfalse_positive [latent,pos=\"0.572,0.888\"]\nlambda1 [latent,pos=\"0.252,0.082\"]\nlambda20 [latent,pos=\"0.450,0.076\"]\nlambda21 [latent,pos=\"0.522,0.081\"]\nlambda30 [latent,pos=\"0.679,0.068\"]\nlambda31 [latent,pos=\"0.741,0.069\"]\ntrue_positive [latent,pos=\"0.380,0.890\"]\ny1 [pos=\"0.124,0.652\"]\ny10 [pos=\"0.240,0.653\"]\ny11 [pos=\"0.511,0.648\"]\ny12 [pos=\"0.770,0.645\"]\ny13 [pos=\"0.276,0.654\"]\ny14 [pos=\"0.544,0.646\"]\ny15 [pos=\"0.814,0.643\"]\ny2 [pos=\"0.403,0.649\"]\ny3 [pos=\"0.658,0.657\"]\ny4 [pos=\"0.164,0.652\"]\ny5 [pos=\"0.442,0.648\"]\ny6 [pos=\"0.693,0.652\"]\ny7 [pos=\"0.200,0.653\"]\ny8 [pos=\"0.476,0.647\"]\ny9 [pos=\"0.732,0.648\"]\n\"1 - lambda1\" -> att1\n\"Q-matrix\" -> delta\natt1 -> att2\natt1 -> delta\natt2 -> att3\natt2 -> delta\natt3 -> delta\ndelta -> y1\ndelta -> y10\ndelta -> y11\ndelta -> y12\ndelta -> y13\ndelta -> y14\ndelta -> y15\ndelta -> y2\ndelta -> y3\ndelta -> y4\ndelta -> y5\ndelta -> y6\ndelta -> y7\ndelta -> y8\ndelta -> y9\nfalse_positive -> y1\nfalse_positive -> y10\nfalse_positive -> y11\nfalse_positive -> y12\nfalse_positive -> y13\nfalse_positive -> y14\nfalse_positive -> y15\nfalse_positive -> y2\nfalse_positive -> y3\nfalse_positive -> y4\nfalse_positive -> y5\nfalse_positive -> y6\nfalse_positive -> y7\nfalse_positive -> y8\nfalse_positive -> y9\nlambda1 -> att1\nlambda20 -> att2\nlambda21 -> att2\nlambda30 -> att3\nlambda31 -> att3\ntrue_positive -> y1\ntrue_positive -> y10\ntrue_positive -> y11\ntrue_positive -> y12\ntrue_positive -> y13\ntrue_positive -> y14\ntrue_positive -> y15\ntrue_positive -> y2\ntrue_positive -> y3\ntrue_positive -> y4\ntrue_positive -> y5\ntrue_positive -> y6\ntrue_positive -> y7\ntrue_positive -> y8\ntrue_positive -> y9\n}\n')\n\nggdag(bayes_net) + theme_dag()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nLastly, the bayes net model is similar to the first model; however, now there are edges between the 3 skills. Other than that, nothing else has changed. In the next post I will be estimating the first bayes net model and doing some posterior checks to see how the model works.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-2.0.0/react-tools.umd.cjs\"></script>\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}