{
  "hash": "89ba28b1c4beeb1f25990e6336baedcf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation in R & Python\" \nsubtitle: |\n  Using dplyr, data.table, and pandas/numpy\nimage: \"rubiks_cube.jpg\"\ncategories: [data manipulation, dplyr, pandas, numpy, python, R, data.table]\ndate: 2024-07-09\n# citation:\n  # url: \nparams:\n  slug: data-manipulation-R-python\n  date: 2024-07-09\n---\n\n\nOne of my favorite posts is the comparison between data.table and the tidyverse's dplyr packages. [Here](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/) is the link to that post. I have used that when trying to build my competence in using data.table. Now I'm going to try and expand on that by creating this post that compares cases of using dplyr, data.table, and now pandas. Hopefully this can be as useful as the comparison between dplyr an data.table post was for me. This is not an extensive way of comparing them but just to get started for anyone that wants to use python more.\n\n\n\n\n\n# Packages & Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n\nr_data <- tibble(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,000 × 3\n        x     x2     y\n    <dbl>  <dbl> <int>\n 1  1.09  -0.457     1\n 2  1.71   2.05      0\n 3 -0.363 -1.66      1\n 4  1.15  -3.56      1\n 5  0.674  0.632     1\n 6 -0.651  0.850     0\n 7  1.37   3.76      1\n 8 -1.61   2.95      0\n 9 -1.82  -0.946     1\n10  0.446 -1.72      1\n# ℹ 990 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table <- data.table(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               x         x2     y\n           <num>      <num> <int>\n   1:  0.3012969 -0.1892336     1\n   2:  1.1449794 -5.2480202     1\n   3:  0.6129881  0.5847694     0\n   4:  0.6039375  3.4301031     1\n   5: -2.8776286 -5.6320773     1\n  ---                            \n 996: -0.9114861  2.5353439     0\n 997:  1.1254929 -3.6333616     0\n 998: -0.4209153 -0.8611292     0\n 999: -0.8542033 -2.4980987     0\n1000: -1.5694783  3.1800399     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    \"x\": np.random.normal(0, scale=1, size=1000),\n    \"x2\": np.random.normal(0, scale=3, size=1000),\n    \"y\": np.random.binomial(n=1, p=0.6, size=1000)\n}\n\n# Creating DataFrame\npy_data = pd.DataFrame(data)\n\nprint(py_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2  y\n0    1.625495 -2.513493  1\n1    1.375477  1.419490  1\n2    0.896304  3.582105  0\n3    1.279369  3.155540  0\n4   -0.992507  2.701708  1\n..        ...       ... ..\n995 -0.035682  0.624143  1\n996 -0.157006 -0.177728  1\n997 -1.229564 -2.765229  1\n998 -0.736607  0.248886  0\n999 -0.070255  0.822051  0\n\n[1000 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\n# Basic Operations\n\n## Filtering (Integers)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    x > 1\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x     x2     y\n  <dbl>  <dbl> <int>\n1  1.09 -0.457     1\n2  1.71  2.05      0\n3  1.15 -3.56      1\n4  1.37  3.76      1\n5  1.30  3.83      1\n6  3.01  2.09      0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[x > 1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x         x2     y\n      <num>      <num> <int>\n1: 1.144979 -5.2480202     1\n2: 2.284941  5.9637749     0\n3: 1.196674 -0.6543321     1\n4: 1.890398 -1.8352037     0\n5: 1.850590 -1.2532883     1\n6: 2.428723  0.2854589     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"x\"] > 1].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        x2  y\n0   1.625495 -2.513493  1\n1   1.375477  1.419490  1\n3   1.279369  3.155540  0\n5   1.212755  2.003532  0\n11  1.412002 -2.758251  1\n```\n\n\n:::\n:::\n\n\n## Filtering (Categorical)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n       x     x2     y\n   <dbl>  <dbl> <int>\n1  1.09  -0.457     1\n2 -0.363 -1.66      1\n3  1.15  -3.56      1\n4  0.674  0.632     1\n5  1.37   3.76      1\n6 -1.82  -0.946     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[y == 1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2     y\n        <num>      <num> <int>\n1:  0.3012969 -0.1892336     1\n2:  1.1449794 -5.2480202     1\n3:  0.6039375  3.4301031     1\n4: -2.8776286 -5.6320773     1\n5:  1.1966740 -0.6543321     1\n6:  1.8505904 -1.2532883     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"y\"] == 1].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2  y\n0  1.625495 -2.513493  1\n1  1.375477  1.419490  1\n4 -0.992507  2.701708  1\n8 -0.284489 -0.317201  1\n9 -0.110960 -0.468932  1\n```\n\n\n:::\n:::\n\n\n## Filtering Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1 &\n    x2 < 0\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n       x     x2     y\n   <dbl>  <dbl> <int>\n1  1.09  -0.457     1\n2 -0.363 -1.66      1\n3  1.15  -3.56      1\n4 -1.82  -0.946     1\n5  0.446 -1.72      1\n6 -0.369 -6.86      1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[\n    y == 1 &\n    x2 > 0\n  ]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2     y\n        <num>     <num> <int>\n1:  0.6039375 3.4301031     1\n2: -0.6132135 2.1888315     1\n3: -2.4182992 1.5879010     1\n4: -2.0788204 0.6814116     1\n5:  0.2546547 0.1272056     1\n6:  2.0922497 4.6317957     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\n  (py_data[\"y\"] == 1) & \n  (py_data[\"x2\"] > 0)\n    ].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        x2  y\n1   1.375477  1.419490  1\n4  -0.992507  2.701708  1\n10 -0.404824  0.780289  1\n14  0.237784  2.241245  1\n23  0.490488  0.160291  1\n```\n\n\n:::\n:::\n\n\n## Sorting Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  arrange(y) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n       x     x2     y\n   <dbl>  <dbl> <int>\n1  1.71   2.05      0\n2 -0.651  0.850     0\n3 -1.61   2.95      0\n4  0.196 -4.13      0\n5  3.01   2.09      0\n6  0.228  0.598     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[order(y)]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2     y\n        <num>      <num> <int>\n1:  0.6129881  0.5847694     0\n2:  2.2849412  5.9637749     0\n3: -1.0921220  7.5136606     0\n4:  0.7583684 -1.8330110     0\n5:  1.8903981 -1.8352037     0\n6: -0.9942675  0.1554529     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.sort_values(by = \"y\").head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2  y\n499  0.938749  0.135750  0\n546 -0.424556 -2.931917  0\n544  0.147953 -2.487124  0\n542 -1.651471  0.683126  0\n541 -0.263890  1.406574  0\n```\n\n\n:::\n:::\n\n\n## Selecting Specific Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    y\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n      y\n  <int>\n1     1\n2     0\n3     1\n4     1\n5     1\n6     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,\"y\"]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y\n   <int>\n1:     1\n2:     1\n3:     0\n4:     1\n5:     1\n6:     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0    1\n1    1\n2    0\n3    0\n4    1\nName: y, dtype: int32\n```\n\n\n:::\n\n```{.python .cell-code}\n\n# py_data.filter(items = \"y\").head()\n```\n:::\n\n\n## Selecting Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  select(x, x2) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n       x     x2\n   <dbl>  <dbl>\n1  1.09  -0.457\n2  1.71   2.05 \n3 -0.363 -1.66 \n4  1.15  -3.56 \n5  0.674  0.632\n6 -0.651  0.850\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,list(x, x2)]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2\n        <num>      <num>\n1:  0.3012969 -0.1892336\n2:  1.1449794 -5.2480202\n3:  0.6129881  0.5847694\n4:  0.6039375  3.4301031\n5: -2.8776286 -5.6320773\n6:  2.2849412  5.9637749\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# py_data[{\"x\", \"x2\"}].head()\n\npy_data.filter(items = [\"x\", \"x2\"]).head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  1.625495 -2.513493\n1  1.375477  1.419490\n2  0.896304  3.582105\n3  1.279369  3.155540\n4 -0.992507  2.701708\n```\n\n\n:::\n:::\n\n\n## Selecting Using Regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    matches(\"x\")\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n       x     x2\n   <dbl>  <dbl>\n1  1.09  -0.457\n2  1.71   2.05 \n3 -0.363 -1.66 \n4  1.15  -3.56 \n5  0.674  0.632\n6 -0.651  0.850\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- grep(\"^x\", names(r_table))\n\nhead(\n  r_table[, ..cols]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2\n        <num>      <num>\n1:  0.3012969 -0.1892336\n2:  1.1449794 -5.2480202\n3:  0.6129881  0.5847694\n4:  0.6039375  3.4301031\n5: -2.8776286 -5.6320773\n6:  2.2849412  5.9637749\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.filter(regex = \"x\").head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  1.625495 -2.513493\n1  1.375477  1.419490\n2  0.896304  3.582105\n3  1.279369  3.155540\n4 -0.992507  2.701708\n```\n\n\n:::\n:::\n\n\n## Summarize Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  summarize(\n    avg = mean(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n     avg\n   <dbl>\n1 0.0279\n```\n\n\n:::\n\n```{.r .cell-code}\n  r_data |>\n  summarize(\n    total = sum(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  total\n  <dbl>\n1  27.9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           avg\n         <num>\n1: -0.01425028\n```\n\n\n:::\n\n```{.r .cell-code}\nr_table[, .(total = sum(x))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       total\n       <num>\n1: -14.25028\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.002775922653748875\n```\n\n\n:::\n\n```{.python .cell-code}\npy_data[\"x\"].sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2.775922653748875\n```\n\n\n:::\n:::\n\n\n## Adding/Updating/Deleting Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data <- r_data |>\n  mutate(\n    x_mult = x*x2\n  )\nhead(r_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n       x     x2     y x_mult\n   <dbl>  <dbl> <int>  <dbl>\n1  1.09  -0.457     1 -0.500\n2  1.71   2.05      0  3.49 \n3 -0.363 -1.66      1  0.604\n4  1.15  -3.56      1 -4.10 \n5  0.674  0.632     1  0.426\n6 -0.651  0.850     0 -0.554\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, x_mult := x*x2]\nhead(r_table[, \"x_mult\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        x_mult\n         <num>\n1: -0.05701551\n2: -6.00887504\n3:  0.35845670\n4:  2.07156775\n5: 16.20702631\n6: 13.62687485\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x_mult\"] = py_data[\"x\"] * py_data[\"x2\"]\npy_data[\"x_mult\"].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0   -4.085671\n1    1.952477\n2    3.210656\n3    4.037102\n4   -2.681463\nName: x_mult, dtype: float64\n```\n\n\n:::\n:::\n\n\n## Counting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> count(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      y     n\n  <int> <int>\n1     0   383\n2     1   617\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .N, by = (y)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y     N\n   <int> <int>\n1:     1   619\n2:     0   381\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n1    590\n0    410\nName: count, dtype: int64\n```\n\n\n:::\n:::\n\n\n## Group By\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      y     avg\n  <int>   <dbl>\n1     0 0.0599 \n2     1 0.00810\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x)), by = \"y\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y          avg\n   <int>        <num>\n1:     1 -0.009975402\n2:     0 -0.021195561\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.groupby(\"y\")[[\"x\"]].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x\ny          \n0  0.041513\n1 -0.024143\n```\n\n\n:::\n:::\n\n\n## Chain Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  ) |>\n  filter(\n    y == 1\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n      y     avg\n  <int>   <dbl>\n1     1 0.00810\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, \n  by = y,\n  .(avg = mean(x))\n  ][\n    y == 1\n  ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y          avg\n   <int>        <num>\n1:     1 -0.009975402\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_group = py_data.groupby(\"y\")[[\"x\"]].mean()\n\npy_group.loc[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nx   -0.024143\nName: 1, dtype: float64\n```\n\n\n:::\n:::\n\n\n## Pivot Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  pivot_longer(\n    -y\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,000 × 3\n       y name    value\n   <int> <chr>   <dbl>\n 1     1 x       1.09 \n 2     1 x2     -0.457\n 3     1 x_mult -0.500\n 4     0 x       1.71 \n 5     0 x2      2.05 \n 6     0 x_mult  3.49 \n 7     1 x      -0.363\n 8     1 x2     -1.66 \n 9     1 x_mult  0.604\n10     1 x       1.15 \n# ℹ 2,990 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmelt(r_table, id.vars = \"y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          y variable      value\n      <int>   <fctr>      <num>\n   1:     1        x  0.3012969\n   2:     1        x  1.1449794\n   3:     0        x  0.6129881\n   4:     1        x  0.6039375\n   5:     1        x -2.8776286\n  ---                          \n2996:     0   x_mult -2.3109308\n2997:     0   x_mult -4.0893226\n2998:     0   x_mult  0.3624624\n2999:     0   x_mult  2.1338842\n3000:     0   x_mult -4.9910036\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"id\"] = py_data.index\n\npy_data.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2  y    x_mult  id\n0  1.625495 -2.513493  1 -4.085671   0\n1  1.375477  1.419490  1  1.952477   1\n2  0.896304  3.582105  0  3.210656   2\n3  1.279369  3.155540  0  4.037102   3\n4 -0.992507  2.701708  1 -2.681463   4\n```\n\n\n:::\n\n```{.python .cell-code}\npy_pivot = py_data.pivot(index='id', columns='y', values=['x', 'x2', 'x_mult'])\n\nprint(py_pivot.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x                  x2              x_mult          \ny          0         1         0         1         0         1\nid                                                            \n0        NaN  1.625495       NaN -2.513493       NaN -4.085671\n1        NaN  1.375477       NaN  1.419490       NaN  1.952477\n2   0.896304       NaN  3.582105       NaN  3.210656       NaN\n3   1.279369       NaN  3.155540       NaN  4.037102       NaN\n4        NaN -0.992507       NaN  2.701708       NaN -2.681463\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}