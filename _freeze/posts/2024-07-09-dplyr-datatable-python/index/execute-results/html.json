{
  "hash": "213a55654e26a1aa6ebc15e98c3a060c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation in R & Python\" \nsubtitle: |\n  Using dplyr, data.table, pandas, and polars\nimage: \"rubiks_cube.jpg\"\ncategories: [data manipulation, dplyr, pandas, numpy, python, R, data.table, polars]\ndate: 2024-07-09\n# citation:\n  # url: \nexecute:\n    warning: false\n    message: false\nparams:\n  slug: data-manipulation-R-python\n  date: 2024-07-09\n---\n\n\nOne of my favorite posts is the comparison between data.table and the tidyverse's dplyr packages. [Here](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/) is the link to that post. I have used that when trying to build my competence in using data.table. Now I'm going to try and expand on that by creating this post that compares cases of using dplyr, data.table, and now pandas. Hopefully this can be as useful as the comparison between dplyr an data.table post was for me. This is not an extensive way of comparing them but just to get started for anyone that wants to use python more.\n\n\n\n\n\n# Packages & Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n\nr_data <- tibble(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,000 × 3\n         x     x2     y\n     <dbl>  <dbl> <int>\n 1  0.409   1.17      1\n 2 -0.846  -3.77      1\n 3  0.0941 -2.09      1\n 4  0.322   1.16      1\n 5 -1.39    1.35      0\n 6  1.26    6.09      1\n 7  0.423  -2.02      1\n 8  0.631  -0.861     1\n 9  0.710  -0.134     0\n10  0.0307 -0.592     1\n# ℹ 990 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table <- data.table(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               x         x2     y\n           <num>      <num> <int>\n   1: -0.1754454 -0.3782700     0\n   2: -0.9763540 -1.3373400     1\n   3:  0.8446304 -0.2514460     0\n   4: -0.5736134  2.5926507     1\n   5: -0.8102045 -2.5416087     1\n  ---                            \n 996: -0.1662248  4.1958309     1\n 997: -2.3012591 -3.2231485     0\n 998: -0.3347386 -0.9638556     0\n 999:  0.5013931 -1.2036860     1\n1000:  0.4185055 -0.5018234     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    'x': np.random.normal(0, scale=1, size=1000),\n    'x2': np.random.normal(0, scale=3, size=1000),\n    'y': np.random.binomial(n=1, p=0.6, size=1000)\n}\n\n# Creating DataFrame\npy_data = pd.DataFrame(data)\n\nprint(py_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2  y\n0    1.120220  3.810238  1\n1    0.947493 -4.892057  0\n2    0.679544 -0.393661  0\n3    0.134986 -0.321329  1\n4    0.551375 -1.034227  0\n..        ...       ... ..\n995  1.635647 -1.750633  1\n996 -0.604228  3.279034  0\n997  0.428933  0.942513  0\n998  1.734978 -4.543330  0\n999 -0.218969  4.305527  0\n\n[1000 rows x 3 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\n\npl_data = pl.DataFrame(data)\n\nprint(pl_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (1_000, 3)\n┌───────────┬───────────┬─────┐\n│ x         ┆ x2        ┆ y   │\n│ ---       ┆ ---       ┆ --- │\n│ f64       ┆ f64       ┆ i32 │\n╞═══════════╪═══════════╪═════╡\n│ 1.12022   ┆ 3.810238  ┆ 1   │\n│ 0.947493  ┆ -4.892057 ┆ 0   │\n│ 0.679544  ┆ -0.393661 ┆ 0   │\n│ 0.134986  ┆ -0.321329 ┆ 1   │\n│ 0.551375  ┆ -1.034227 ┆ 0   │\n│ …         ┆ …         ┆ …   │\n│ 1.635647  ┆ -1.750633 ┆ 1   │\n│ -0.604228 ┆ 3.279034  ┆ 0   │\n│ 0.428933  ┆ 0.942513  ┆ 0   │\n│ 1.734978  ┆ -4.54333  ┆ 0   │\n│ -0.218969 ┆ 4.305527  ┆ 0   │\n└───────────┴───────────┴─────┘\n```\n\n\n:::\n:::\n\n\n# Basic Operations\n\n## Filtering (Integers)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    x > 1\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x    x2     y\n  <dbl> <dbl> <int>\n1  1.26  6.09     1\n2  1.13 -1.44     1\n3  2.12  2.60     0\n4  1.00  2.13     1\n5  1.59  3.99     1\n6  2.20 -1.62     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[x > 1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x         x2     y\n      <num>      <num> <int>\n1: 1.674498  3.6659813     0\n2: 3.004482  3.0656903     1\n3: 2.551585  8.1276025     1\n4: 1.733821 -0.8900152     1\n5: 1.263874 -1.2767909     1\n6: 1.540138  3.6267555     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"x\"] > 1].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        x2  y\n0   1.120220  3.810238  1\n20  1.515091  1.237811  0\n28  2.129698  3.715099  1\n29  1.028248  0.270362  1\n33  1.886046  0.232325  1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('x') > 1).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i32</td></tr></thead><tbody><tr><td>1.12022</td><td>3.810238</td><td>1</td></tr><tr><td>1.515091</td><td>1.237811</td><td>0</td></tr><tr><td>2.129698</td><td>3.715099</td><td>1</td></tr><tr><td>1.028248</td><td>0.270362</td><td>1</td></tr><tr><td>1.886046</td><td>0.232325</td><td>1</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Filtering (Categorical)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n        x    x2     y\n    <dbl> <dbl> <int>\n1  0.409   1.17     1\n2 -0.846  -3.77     1\n3  0.0941 -2.09     1\n4  0.322   1.16     1\n5  1.26    6.09     1\n6  0.423  -2.02     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[y == 1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2     y\n        <num>      <num> <int>\n1: -0.9763540 -1.3373400     1\n2: -0.5736134  2.5926507     1\n3: -0.8102045 -2.5416087     1\n4: -0.4948199  0.4980446     1\n5:  0.5398953  3.0874990     1\n6:  0.1005187  0.3697423     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"y\"] == 1].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2  y\n0  1.120220  3.810238  1\n3  0.134986 -0.321329  1\n5 -1.493926  3.362695  1\n8  0.907419  4.916472  1\n9 -0.244917 -3.831616  1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('y') == 1).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i32</td></tr></thead><tbody><tr><td>1.12022</td><td>3.810238</td><td>1</td></tr><tr><td>0.134986</td><td>-0.321329</td><td>1</td></tr><tr><td>-1.493926</td><td>3.362695</td><td>1</td></tr><tr><td>0.907419</td><td>4.916472</td><td>1</td></tr><tr><td>-0.244917</td><td>-3.831616</td><td>1</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Filtering Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1 &\n    x2 < 0\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n        x     x2     y\n    <dbl>  <dbl> <int>\n1 -0.846  -3.77      1\n2  0.0941 -2.09      1\n3  0.423  -2.02      1\n4  0.631  -0.861     1\n5  0.0307 -0.592     1\n6  0.759  -4.35      1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[\n    y == 1 &\n    x2 > 0\n  ]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2     y\n        <num>     <num> <int>\n1: -0.5736134 2.5926507     1\n2: -0.4948199 0.4980446     1\n3:  0.5398953 3.0874990     1\n4:  0.1005187 0.3697423     1\n5:  0.2489273 3.2787428     1\n6: -1.4057361 3.9976275     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\n  (py_data[\"y\"] == 1) & \n  (py_data[\"x2\"] > 0)\n    ].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        x2  y\n0   1.120220  3.810238  1\n5  -1.493926  3.362695  1\n8   0.907419  4.916472  1\n15  0.091052  1.497482  1\n17 -0.438709  0.148849  1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('y') == 1, pl.col('x2') > 0).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i32</td></tr></thead><tbody><tr><td>1.12022</td><td>3.810238</td><td>1</td></tr><tr><td>-1.493926</td><td>3.362695</td><td>1</td></tr><tr><td>0.907419</td><td>4.916472</td><td>1</td></tr><tr><td>0.091052</td><td>1.497482</td><td>1</td></tr><tr><td>-0.438709</td><td>0.148849</td><td>1</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\n# uses a comma instead of using &\n```\n:::\n\n\n## Sorting Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  arrange(y) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n        x     x2     y\n    <dbl>  <dbl> <int>\n1 -1.39    1.35      0\n2  0.710  -0.134     0\n3 -2.00    0.169     0\n4 -0.116  -4.16      0\n5  0.328  -2.07      0\n6 -0.0749  3.35      0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[order(y)]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2     y\n        <num>      <num> <int>\n1: -0.1754454 -0.3782700     0\n2:  0.8446304 -0.2514460     0\n3: -0.1584563  1.2388419     0\n4:  1.6744982  3.6659813     0\n5:  0.1953033 -6.5178594     0\n6:  0.2178685 -0.9440392     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.sort_values(by = \"y\").head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2  y\n991 -1.018447  1.546185  0\n990  0.073119  2.523895  0\n989  0.764942 -0.644956  0\n986  0.295163  2.893048  0\n984  1.247925  2.175303  0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.sort(pl.col('y')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i32</td></tr></thead><tbody><tr><td>0.947493</td><td>-4.892057</td><td>0</td></tr><tr><td>0.679544</td><td>-0.393661</td><td>0</td></tr><tr><td>0.551375</td><td>-1.034227</td><td>0</td></tr><tr><td>-0.261602</td><td>1.120449</td><td>0</td></tr><tr><td>-0.500885</td><td>1.855574</td><td>0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Selecting Specific Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    y\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n      y\n  <int>\n1     1\n2     1\n3     1\n4     1\n5     0\n6     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,\"y\"]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y\n   <int>\n1:     0\n2:     1\n3:     0\n4:     1\n5:     1\n6:     0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0    1\n1    0\n2    0\n3    1\n4    0\nName: y, dtype: int32\n```\n\n\n:::\n\n```{.python .cell-code}\n\n# py_data.filter(items = \"y\").head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.col('y')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th></tr><tr><td>i32</td></tr></thead><tbody><tr><td>1</td></tr><tr><td>0</td></tr><tr><td>0</td></tr><tr><td>1</td></tr><tr><td>0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Selecting Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  select(x, x2) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n        x    x2\n    <dbl> <dbl>\n1  0.409   1.17\n2 -0.846  -3.77\n3  0.0941 -2.09\n4  0.322   1.16\n5 -1.39    1.35\n6  1.26    6.09\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,list(x, x2)]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2\n        <num>     <num>\n1: -0.1754454 -0.378270\n2: -0.9763540 -1.337340\n3:  0.8446304 -0.251446\n4: -0.5736134  2.592651\n5: -0.8102045 -2.541609\n6: -0.1584563  1.238842\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[[\"x\", \"x2\"]].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  1.120220  3.810238\n1  0.947493 -4.892057\n2  0.679544 -0.393661\n3  0.134986 -0.321329\n4  0.551375 -1.034227\n```\n\n\n:::\n\n```{.python .cell-code}\n# or\npy_data.filter(items = [\"x\", \"x2\"]).head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  1.120220  3.810238\n1  0.947493 -4.892057\n2  0.679544 -0.393661\n3  0.134986 -0.321329\n4  0.551375 -1.034227\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.col('x'), pl.col('x2')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1.12022</td><td>3.810238</td></tr><tr><td>0.947493</td><td>-4.892057</td></tr><tr><td>0.679544</td><td>-0.393661</td></tr><tr><td>0.134986</td><td>-0.321329</td></tr><tr><td>0.551375</td><td>-1.034227</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Selecting Using Regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    matches(\"x\")\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n        x    x2\n    <dbl> <dbl>\n1  0.409   1.17\n2 -0.846  -3.77\n3  0.0941 -2.09\n4  0.322   1.16\n5 -1.39    1.35\n6  1.26    6.09\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- grep(\"^x\", names(r_table))\n\nhead(\n  r_table[, ..cols]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2\n        <num>     <num>\n1: -0.1754454 -0.378270\n2: -0.9763540 -1.337340\n3:  0.8446304 -0.251446\n4: -0.5736134  2.592651\n5: -0.8102045 -2.541609\n6: -0.1584563  1.238842\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.filter(regex = \"x\").head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  1.120220  3.810238\n1  0.947493 -4.892057\n2  0.679544 -0.393661\n3  0.134986 -0.321329\n4  0.551375 -1.034227\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars.selectors as cs\n\npl_data.select(cs.starts_with('x')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1.12022</td><td>3.810238</td></tr><tr><td>0.947493</td><td>-4.892057</td></tr><tr><td>0.679544</td><td>-0.393661</td></tr><tr><td>0.134986</td><td>-0.321329</td></tr><tr><td>0.551375</td><td>-1.034227</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Summarize Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  summarize(\n    avg = mean(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n      avg\n    <dbl>\n1 -0.0366\n```\n\n\n:::\n\n```{.r .cell-code}\n  r_data |>\n  summarize(\n    total = sum(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  total\n  <dbl>\n1 -36.6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          avg\n        <num>\n1: 0.05005754\n```\n\n\n:::\n\n```{.r .cell-code}\nr_table[, .(total = sum(x))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      total\n      <num>\n1: 50.05754\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnp.float64(0.04849950488018116)\n```\n\n\n:::\n\n```{.python .cell-code}\npy_data[\"x\"].sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnp.float64(48.49950488018116)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.mean('x'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>0.0485</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\npl_data.select(pl.sum('x'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>48.499505</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Adding/Updating/Deleting Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data <- r_data |>\n  mutate(\n    x_mult = x*x2\n  )\nhead(r_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n        x    x2     y x_mult\n    <dbl> <dbl> <int>  <dbl>\n1  0.409   1.17     1  0.478\n2 -0.846  -3.77     1  3.18 \n3  0.0941 -2.09     1 -0.197\n4  0.322   1.16     1  0.374\n5 -1.39    1.35     0 -1.88 \n6  1.26    6.09     1  7.67 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, x_mult := x*x2]\nhead(r_table[, \"x_mult\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        x_mult\n         <num>\n1:  0.06636573\n2:  1.30571727\n3: -0.21237892\n4: -1.48717919\n5:  2.05922268\n6: -0.19630230\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x_mult\"] = py_data[\"x\"] * py_data[\"x2\"]\npy_data[\"x_mult\"].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0    4.268305\n1   -4.635190\n2   -0.267510\n3   -0.043375\n4   -0.570247\nName: x_mult, dtype: float64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.with_columns((pl.col('x') * pl.col('x2')).alias('x_mult'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1_000, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th><th>x_mult</th></tr><tr><td>f64</td><td>f64</td><td>i32</td><td>f64</td></tr></thead><tbody><tr><td>1.12022</td><td>3.810238</td><td>1</td><td>4.268305</td></tr><tr><td>0.947493</td><td>-4.892057</td><td>0</td><td>-4.63519</td></tr><tr><td>0.679544</td><td>-0.393661</td><td>0</td><td>-0.26751</td></tr><tr><td>0.134986</td><td>-0.321329</td><td>1</td><td>-0.043375</td></tr><tr><td>0.551375</td><td>-1.034227</td><td>0</td><td>-0.570247</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>1.635647</td><td>-1.750633</td><td>1</td><td>-2.863418</td></tr><tr><td>-0.604228</td><td>3.279034</td><td>0</td><td>-1.981286</td></tr><tr><td>0.428933</td><td>0.942513</td><td>0</td><td>0.404275</td></tr><tr><td>1.734978</td><td>-4.54333</td><td>0</td><td>-7.882577</td></tr><tr><td>-0.218969</td><td>4.305527</td><td>0</td><td>-0.942777</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Counting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> count(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      y     n\n  <int> <int>\n1     0   406\n2     1   594\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .N, by = (y)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y     N\n   <int> <int>\n1:     0   400\n2:     1   600\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n1    581\n0    419\nName: count, dtype: int64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl.Series(pl_data.select(pl.col('y'))).value_counts()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>count</th></tr><tr><td>i32</td><td>u32</td></tr></thead><tbody><tr><td>0</td><td>419</td></tr><tr><td>1</td><td>581</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Group By\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      y     avg\n  <int>   <dbl>\n1     0 -0.0440\n2     1 -0.0316\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x)), by = \"y\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y         avg\n   <int>       <num>\n1:     0 0.001986386\n2:     1 0.082104971\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.groupby(\"y\")[\"x\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n0    0.095591\n1    0.014539\nName: x, dtype: float64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.group_by('y').agg(pl.col('x').mean())\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>x</th></tr><tr><td>i32</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>0.014539</td></tr><tr><td>0</td><td>0.095591</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Chain Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  ) |>\n  filter(\n    y == 1\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n      y     avg\n  <int>   <dbl>\n1     1 -0.0316\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, \n  by = y,\n  .(avg = mean(x))\n  ][\n    y == 1\n  ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y        avg\n   <int>      <num>\n1:     1 0.08210497\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_group = py_data.groupby(\"y\")[\"x\"].mean().reset_index()\n\npy_group.iloc[1:, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   y         x\n1  1  0.014539\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_group = pl_data.group_by('y').agg(pl.col('x').mean())\n\npl_group.filter(pl.col('y') == 1)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>x</th></tr><tr><td>i32</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>0.014539</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Pivot Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  pivot_longer(\n    -y\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      y name    value\n  <int> <chr>   <dbl>\n1     1 x       0.409\n2     1 x2      1.17 \n3     1 x_mult  0.478\n4     1 x      -0.846\n5     1 x2     -3.77 \n6     1 x_mult  3.18 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(melt(r_table, id.vars = \"y\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y variable      value\n   <int>   <fctr>      <num>\n1:     0        x -0.1754454\n2:     1        x -0.9763540\n3:     0        x  0.8446304\n4:     1        x -0.5736134\n5:     1        x -0.8102045\n6:     0        x -0.1584563\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.melt(id_vars = ['y'], value_vars = ['x', 'x2', 'x_mult']).head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   y variable     value\n0  1        x  1.120220\n1  0        x  0.947493\n2  0        x  0.679544\n3  1        x  0.134986\n4  0        x  0.551375\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.unpivot(index = 'y').head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>variable</th><th>value</th></tr><tr><td>i32</td><td>str</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>&quot;x&quot;</td><td>1.12022</td></tr><tr><td>0</td><td>&quot;x&quot;</td><td>0.947493</td></tr><tr><td>0</td><td>&quot;x&quot;</td><td>0.679544</td></tr><tr><td>1</td><td>&quot;x&quot;</td><td>0.134986</td></tr><tr><td>0</td><td>&quot;x&quot;</td><td>0.551375</td></tr></tbody></table></div>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}