{
  "hash": "afe506376f6bb6a1e23eccb52e1db272",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation in R & Python\" \nsubtitle: |\n  Using dplyr, data.table, pandas, and polars\nimage: puzzle.jpg\ncategories: [data manipulation, dplyr, pandas, numpy, python, R, data.table, polars]\ndate: 2024-11-15\n# citation:\n  # url: \nexecute:\n    warning: false\n    message: false\n    eval: false\nparams:\n  slug: data-manipulation-R-python\n  date: 2024-11-15\n---\n\n\n![Photo by [Joseph Malone](https://unsplash.com/@jm2812?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/a-wooden-table-topped-with-lots-of-puzzle-pieces-appzhYEQHhU?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)](puzzle.jpg){fig-alt=\"An image of an incomplete puzzle.\" fig-align=\"left\" width=7in, height=7in}\n\n\nOne of my favorite posts is the comparison between data.table and the tidyverse's dplyr packages. [Here](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/) is the link to that post. I have used that when trying to build my competence in using data.table. Now I'm going to try and expand on that by creating this post that compares cases of using dplyr, data.table, pandas, and polars. Hopefully this can be as useful as the comparison between dplyr and data.table post was for me. This is not an extensive way of comparing them but just to get started for anyone that wants to use python more.\n\n\n\n\n\n# Packages & Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n\nr_data <- tibble(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table <- data.table(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_table)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    'x': np.random.normal(0, scale=1, size=1000),\n    'x2': np.random.normal(0, scale=3, size=1000),\n    'y': np.random.binomial(n=1, p=0.6, size=1000)\n}\n\n# Creating DataFrame\npy_data = pd.DataFrame(data)\n\nprint(py_data)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\n\npl_data = pl.DataFrame(data)\n\nprint(pl_data)\n```\n:::\n\n\n# Basic Operations\n\n## Filtering (Integers)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    x > 1\n  ) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[x > 1]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"x\"] > 1].head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('x') > 1).head()\n```\n:::\n\n\n## Filtering (Categorical)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1\n  ) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[y == 1]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"y\"] == 1].head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('y') == 1).head()\n```\n:::\n\n\n## Filtering Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1 &\n    x2 < 0\n  ) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[\n    y == 1 &\n    x2 > 0\n  ]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\n  (py_data[\"y\"] == 1) & \n  (py_data[\"x2\"] > 0)\n    ].head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('y') == 1, pl.col('x2') > 0).head()\n# uses a comma instead of using &\n```\n:::\n\n\n## Sorting Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  arrange(y) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[order(y)]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.sort_values(by = \"y\").head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.sort(pl.col('y')).head()\n```\n:::\n\n\n## Selecting Specific Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    y\n  ) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,\"y\"]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].head()\n\n# py_data.filter(items = \"y\").head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.col('y')).head()\n```\n:::\n\n\n## Selecting Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  select(x, x2) |> \n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,list(x, x2)]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[[\"x\", \"x2\"]].head()\n# or\npy_data.filter(items = [\"x\", \"x2\"]).head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.col('x'), pl.col('x2')).head()\n```\n:::\n\n\n## Selecting Using Regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    matches(\"x\")\n  ) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- grep(\"^x\", names(r_table))\n\nhead(\n  r_table[, ..cols]\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.filter(regex = \"x\").head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars.selectors as cs\n\npl_data.select(cs.starts_with('x')).head()\n```\n:::\n\n\n## Summarize Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  summarize(\n    avg = mean(x)\n  )\n\n  r_data |>\n  summarize(\n    total = sum(x)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x))]\n\nr_table[, .(total = sum(x))]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x\"].mean()\n\npy_data[\"x\"].sum()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.mean('x'))\n\npl_data.select(pl.sum('x'))\n```\n:::\n\n\n## Adding/Updating/Deleting Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data <- r_data |>\n  mutate(\n    x_mult = x*x2\n  )\nhead(r_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, x_mult := x*x2]\nhead(r_table[, \"x_mult\"])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x_mult\"] = py_data[\"x\"] * py_data[\"x2\"]\npy_data[\"x_mult\"].head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.with_columns((pl.col('x') * pl.col('x2')).alias('x_mult'))\n```\n:::\n\n\n## Counting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> count(y)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .N, by = (y)]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].value_counts()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl.Series(pl_data.select(pl.col('y'))).value_counts()\n```\n:::\n\n\n## Group By\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x)), by = \"y\"]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.groupby(\"y\")[\"x\"].mean()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.group_by('y').agg(pl.col('x').mean())\n```\n:::\n\n\n## Chain Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  ) |>\n  filter(\n    y == 1\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, \n  by = y,\n  .(avg = mean(x))\n  ][\n    y == 1\n  ]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_group = py_data.groupby(\"y\")[\"x\"].mean().reset_index()\n\npy_group.iloc[1:, ]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_group = pl_data.group_by('y').agg(pl.col('x').mean())\n\npl_group.filter(pl.col('y') == 1)\n```\n:::\n\n\n## Pivot Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  pivot_longer(\n    -y\n  ) |>\n  head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(melt(r_table, id.vars = \"y\"))\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.melt(id_vars = ['y'], value_vars = ['x', 'x2', 'x_mult']).head()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.unpivot(index = 'y').head()\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}