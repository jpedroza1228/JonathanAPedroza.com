{
  "hash": "d9a5046d0cb5046dcee09c1235c0da62",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation in R & Python\" \nsubtitle: |\n  Using dplyr, data.table, pandas, and polars\nimage: puzzle.jpg\ncategories: [Data Manipulation, dplyr, pandas, numpy, Python, R, data.table, polars, Data Wrangling]\ndate: 2024-11-15\n# citation:\n  # url: \nexecute:\n    warning: false\n    message: false\nparams:\n  slug: data-manipulation-R-python\n  date: 2024-11-15\n---\n\n![Photo by [Joseph Malone](https://unsplash.com/@jm2812?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/a-wooden-table-topped-with-lots-of-puzzle-pieces-appzhYEQHhU?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)](puzzle.jpg){fig-alt=\"An image of an incomplete puzzle.\" fig-align=\"left\" width=\"6in\"}\n\nOne of my favorite posts is the comparison between data.table and the tidyverse's dplyr packages. [Here](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/) is the link to that post. I have used that when trying to build my competence in using data.table. Now I'm going to try and expand on that by creating this post that compares cases of using dplyr, data.table, pandas, and polars. Hopefully this can be as useful as the comparison between dplyr and data.table post was for me. This is not an extensive way of comparing them but just to get started for anyone that wants to use python more.\n\n\n\n# Packages & Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n\nr_data <- tibble(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,000 × 3\n          x     x2     y\n      <dbl>  <dbl> <int>\n 1  0.678   -0.881     1\n 2  0.740    1.67      1\n 3  0.698   -1.54      1\n 4 -0.681   -1.69      0\n 5  2.12     0.254     0\n 6 -2.02     2.11      1\n 7 -0.777   -1.13      0\n 8  0.894    3.60      1\n 9  0.993   -0.821     0\n10 -0.00111 -4.88      1\n# ℹ 990 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table <- data.table(\n  x = rnorm(n = 1000),\n  x2 = rnorm(n = 1000, sd = 3),\n  y = rbinom(n = 1000, size = 1, prob = .6)\n)\n\nprint(r_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               x         x2     y\n           <num>      <num> <int>\n   1:  0.0478488  0.6959370     1\n   2: -0.1134272  1.5324302     1\n   3: -0.2430403 -1.3031583     1\n   4:  0.1240982  4.5723036     1\n   5:  0.3497546 -1.8382310     1\n  ---                            \n 996:  0.3711398  0.9629948     1\n 997: -0.2156559  1.5034822     1\n 998:  3.2653217 -4.2318717     1\n 999: -1.3480967 -3.9285489     1\n1000: -1.1387217 -3.5947204     1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    'x': np.random.normal(0, scale=1, size=1000),\n    'x2': np.random.normal(0, scale=3, size=1000),\n    'y': np.random.binomial(n=1, p=0.6, size=1000)\n}\n\n# Creating DataFrame\npy_data = pd.DataFrame(data)\n\nprint(py_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2  y\n0    0.135675 -0.972398  1\n1   -0.913936 -1.200411  1\n2   -1.301978  2.226628  1\n3   -0.091329  4.175439  0\n4    1.757646  1.702309  1\n..        ...       ... ..\n995 -0.698766 -3.441828  0\n996 -0.977856 -2.579932  1\n997  0.927726  1.937473  1\n998 -1.617165  2.029949  1\n999  0.050764  1.700852  0\n\n[1000 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\n\npl_data = pl.DataFrame(data)\n\nprint(pl_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (1_000, 3)\n┌───────────┬───────────┬─────┐\n│ x         ┆ x2        ┆ y   │\n│ ---       ┆ ---       ┆ --- │\n│ f64       ┆ f64       ┆ i64 │\n╞═══════════╪═══════════╪═════╡\n│ 0.135675  ┆ -0.972398 ┆ 1   │\n│ -0.913936 ┆ -1.200411 ┆ 1   │\n│ -1.301978 ┆ 2.226628  ┆ 1   │\n│ -0.091329 ┆ 4.175439  ┆ 0   │\n│ 1.757646  ┆ 1.702309  ┆ 1   │\n│ …         ┆ …         ┆ …   │\n│ -0.698766 ┆ -3.441828 ┆ 0   │\n│ -0.977856 ┆ -2.579932 ┆ 1   │\n│ 0.927726  ┆ 1.937473  ┆ 1   │\n│ -1.617165 ┆ 2.029949  ┆ 1   │\n│ 0.050764  ┆ 1.700852  ┆ 0   │\n└───────────┴───────────┴─────┘\n```\n\n\n:::\n:::\n\n\n# Basic Operations\n\n## Filtering (Integers)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    x > 1\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x     x2     y\n  <dbl>  <dbl> <int>\n1  2.12  0.254     0\n2  1.01 -2.21      0\n3  1.28 -2.35      1\n4  1.06 -7.83      1\n5  1.56 -2.19      1\n6  1.60 -1.68      1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[x > 1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x          x2     y\n      <num>       <num> <int>\n1: 1.284609 -1.08079020     1\n2: 1.591378  0.02632543     1\n3: 1.674949 -6.36352846     0\n4: 1.635163 -1.44105381     0\n5: 1.018293 -0.28489632     0\n6: 1.020523 -2.94176344     1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"x\"] > 1].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        x2  y\n4   1.757646  1.702309  1\n22  2.337422 -0.872268  0\n25  1.379007 -0.217651  1\n34  1.775157 -3.427305  1\n41  1.169759  1.420520  0\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('x') > 1).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>1.757646</td><td>1.702309</td><td>1</td></tr><tr><td>2.337422</td><td>-0.872268</td><td>0</td></tr><tr><td>1.379007</td><td>-0.217651</td><td>1</td></tr><tr><td>1.775157</td><td>-3.427305</td><td>1</td></tr><tr><td>1.169759</td><td>1.42052</td><td>0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Filtering (Categorical)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n         x     x2     y\n     <dbl>  <dbl> <int>\n1  0.678   -0.881     1\n2  0.740    1.67      1\n3  0.698   -1.54      1\n4 -2.02     2.11      1\n5  0.894    3.60      1\n6 -0.00111 -4.88      1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[y == 1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2     y\n        <num>     <num> <int>\n1:  0.0478488  0.695937     1\n2: -0.1134272  1.532430     1\n3: -0.2430403 -1.303158     1\n4:  0.1240982  4.572304     1\n5:  0.3497546 -1.838231     1\n6:  1.2846087 -1.080790     1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[py_data[\"y\"] == 1].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2  y\n0  0.135675 -0.972398  1\n1 -0.913936 -1.200411  1\n2 -1.301978  2.226628  1\n4  1.757646  1.702309  1\n6 -0.789002  2.008444  1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('y') == 1).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>0.135675</td><td>-0.972398</td><td>1</td></tr><tr><td>-0.913936</td><td>-1.200411</td><td>1</td></tr><tr><td>-1.301978</td><td>2.226628</td><td>1</td></tr><tr><td>1.757646</td><td>1.702309</td><td>1</td></tr><tr><td>-0.789002</td><td>2.008444</td><td>1</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Filtering Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  filter(\n    y == 1 &\n    x2 < 0\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n         x      x2     y\n     <dbl>   <dbl> <int>\n1  0.678   -0.881      1\n2  0.698   -1.54       1\n3 -0.00111 -4.88       1\n4 -1.65    -3.97       1\n5  0.678   -0.0252     1\n6  0.981   -0.0460     1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[\n    y == 1 &\n    x2 > 0\n  ]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x         x2     y\n        <num>      <num> <int>\n1:  0.0478488 0.69593699     1\n2: -0.1134272 1.53243024     1\n3:  0.1240982 4.57230356     1\n4: -0.3913492 3.27903295     1\n5:  1.5913775 0.02632543     1\n6: -1.1253344 0.47936905     1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\n  (py_data[\"y\"] == 1) & \n  (py_data[\"x2\"] > 0)\n    ].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           x        x2  y\n2  -1.301978  2.226628  1\n4   1.757646  1.702309  1\n6  -0.789002  2.008444  1\n12 -1.044933  1.005732  1\n13 -0.519737  2.415808  1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.filter(pl.col('y') == 1, pl.col('x2') > 0).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>-1.301978</td><td>2.226628</td><td>1</td></tr><tr><td>1.757646</td><td>1.702309</td><td>1</td></tr><tr><td>-0.789002</td><td>2.008444</td><td>1</td></tr><tr><td>-1.044933</td><td>1.005732</td><td>1</td></tr><tr><td>-0.519737</td><td>2.415808</td><td>1</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\n# uses a comma instead of using &\n```\n:::\n\n\n## Sorting Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  arrange(y) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n       x     x2     y\n   <dbl>  <dbl> <int>\n1 -0.681 -1.69      0\n2  2.12   0.254     0\n3 -0.777 -1.13      0\n4  0.993 -0.821     0\n5 -1.57  -1.84      0\n6  0.508 -1.16      0\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[order(y)]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x          x2     y\n        <num>       <num> <int>\n1:  0.1528183 -0.08437265     0\n2: -0.1938756  1.78788362     0\n3: -2.4107423  6.63182147     0\n4: -1.3682575  0.05525738     0\n5: -2.1888937 -1.98375940     0\n6: -0.5623052  0.05425300     0\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.sort_values(by = \"y\").head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        x2  y\n980 -1.960833 -2.790498  0\n11  -1.350877  1.116719  0\n10  -0.574171  2.722374  0\n5   -0.494218  3.842638  0\n3   -0.091329  4.175439  0\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.sort(pl.col('y')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th></tr><tr><td>f64</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>-0.091329</td><td>4.175439</td><td>0</td></tr><tr><td>-0.494218</td><td>3.842638</td><td>0</td></tr><tr><td>-0.574171</td><td>2.722374</td><td>0</td></tr><tr><td>-1.350877</td><td>1.116719</td><td>0</td></tr><tr><td>0.322848</td><td>0.835612</td><td>0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Selecting Specific Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    y\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n      y\n  <int>\n1     1\n2     1\n3     1\n4     0\n5     0\n6     1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,\"y\"]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y\n   <int>\n1:     1\n2:     1\n3:     1\n4:     1\n5:     1\n6:     0\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0    1\n1    1\n2    1\n3    0\n4    1\nName: y, dtype: int64\n```\n\n\n:::\n\n```{.python .cell-code}\n\n# py_data.filter(items = \"y\").head()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.col('y')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th></tr><tr><td>i64</td></tr></thead><tbody><tr><td>1</td></tr><tr><td>1</td></tr><tr><td>1</td></tr><tr><td>0</td></tr><tr><td>1</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Selecting Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> \n  select(x, x2) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n       x     x2\n   <dbl>  <dbl>\n1  0.678 -0.881\n2  0.740  1.67 \n3  0.698 -1.54 \n4 -0.681 -1.69 \n5  2.12   0.254\n6 -2.02   2.11 \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(\n  r_table[,list(x, x2)]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x          x2\n        <num>       <num>\n1:  0.0478488  0.69593699\n2: -0.1134272  1.53243024\n3: -0.2430403 -1.30315830\n4:  0.1240982  4.57230356\n5:  0.3497546 -1.83823096\n6:  0.1528183 -0.08437265\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[[\"x\", \"x2\"]].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  0.135675 -0.972398\n1 -0.913936 -1.200411\n2 -1.301978  2.226628\n3 -0.091329  4.175439\n4  1.757646  1.702309\n```\n\n\n:::\n\n```{.python .cell-code}\n# or\npy_data.filter(items = [\"x\", \"x2\"]).head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  0.135675 -0.972398\n1 -0.913936 -1.200411\n2 -1.301978  2.226628\n3 -0.091329  4.175439\n4  1.757646  1.702309\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.col('x'), pl.col('x2')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>0.135675</td><td>-0.972398</td></tr><tr><td>-0.913936</td><td>-1.200411</td></tr><tr><td>-1.301978</td><td>2.226628</td></tr><tr><td>-0.091329</td><td>4.175439</td></tr><tr><td>1.757646</td><td>1.702309</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Selecting Using Regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  select(\n    matches(\"x\")\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n       x     x2\n   <dbl>  <dbl>\n1  0.678 -0.881\n2  0.740  1.67 \n3  0.698 -1.54 \n4 -0.681 -1.69 \n5  2.12   0.254\n6 -2.02   2.11 \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- grep(\"^x\", names(r_table))\n\nhead(\n  r_table[, ..cols]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x          x2\n        <num>       <num>\n1:  0.0478488  0.69593699\n2: -0.1134272  1.53243024\n3: -0.2430403 -1.30315830\n4:  0.1240982  4.57230356\n5:  0.3497546 -1.83823096\n6:  0.1528183 -0.08437265\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.filter(regex = \"x\").head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x        x2\n0  0.135675 -0.972398\n1 -0.913936 -1.200411\n2 -1.301978  2.226628\n3 -0.091329  4.175439\n4  1.757646  1.702309\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars.selectors as cs\n\npl_data.select(cs.starts_with('x')).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>0.135675</td><td>-0.972398</td></tr><tr><td>-0.913936</td><td>-1.200411</td></tr><tr><td>-1.301978</td><td>2.226628</td></tr><tr><td>-0.091329</td><td>4.175439</td></tr><tr><td>1.757646</td><td>1.702309</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Summarize Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  summarize(\n    avg = mean(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n     avg\n   <dbl>\n1 0.0406\n```\n\n\n:::\n\n```{.r .cell-code}\n  r_data |>\n  summarize(\n    total = sum(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  total\n  <dbl>\n1  40.6\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            avg\n          <num>\n1: -0.004438116\n```\n\n\n:::\n\n```{.r .cell-code}\nr_table[, .(total = sum(x))]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       total\n       <num>\n1: -4.438116\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnp.float64(-0.011356872534100343)\n```\n\n\n:::\n\n```{.python .cell-code}\npy_data[\"x\"].sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnp.float64(-11.356872534100342)\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.select(pl.mean('x'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>-0.011357</td></tr></tbody></table></div>\n```\n\n:::\n\n```{.python .cell-code}\npl_data.select(pl.sum('x'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>-11.356873</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Adding/Updating/Deleting Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data <- r_data |>\n  mutate(\n    x_mult = x*x2\n  )\nhead(r_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n       x     x2     y x_mult\n   <dbl>  <dbl> <int>  <dbl>\n1  0.678 -0.881     1 -0.597\n2  0.740  1.67      1  1.23 \n3  0.698 -1.54      1 -1.07 \n4 -0.681 -1.69      0  1.15 \n5  2.12   0.254     0  0.537\n6 -2.02   2.11      1 -4.27 \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, x_mult := x*x2]\nhead(r_table[, \"x_mult\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        x_mult\n         <num>\n1:  0.03329975\n2: -0.17381921\n3:  0.31671995\n4:  0.56741486\n5: -0.64292978\n6: -0.01289369\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"x_mult\"] = py_data[\"x\"] * py_data[\"x2\"]\npy_data[\"x_mult\"].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0   -0.131930\n1    1.097099\n2   -2.899022\n3   -0.381339\n4    2.992057\nName: x_mult, dtype: float64\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.with_columns((pl.col('x') * pl.col('x2')).alias('x_mult'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1_000, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>x2</th><th>y</th><th>x_mult</th></tr><tr><td>f64</td><td>f64</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>0.135675</td><td>-0.972398</td><td>1</td><td>-0.13193</td></tr><tr><td>-0.913936</td><td>-1.200411</td><td>1</td><td>1.097099</td></tr><tr><td>-1.301978</td><td>2.226628</td><td>1</td><td>-2.899022</td></tr><tr><td>-0.091329</td><td>4.175439</td><td>0</td><td>-0.381339</td></tr><tr><td>1.757646</td><td>1.702309</td><td>1</td><td>2.992057</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>-0.698766</td><td>-3.441828</td><td>0</td><td>2.405032</td></tr><tr><td>-0.977856</td><td>-2.579932</td><td>1</td><td>2.522803</td></tr><tr><td>0.927726</td><td>1.937473</td><td>1</td><td>1.797444</td></tr><tr><td>-1.617165</td><td>2.029949</td><td>1</td><td>-3.282763</td></tr><tr><td>0.050764</td><td>1.700852</td><td>0</td><td>0.086342</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Counting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |> count(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      y     n\n  <int> <int>\n1     0   387\n2     1   613\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .N, by = (y)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y     N\n   <int> <int>\n1:     1   600\n2:     0   400\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data[\"y\"].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n1    609\n0    391\nName: count, dtype: int64\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl.Series(pl_data.select(pl.col('y'))).value_counts()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>count</th></tr><tr><td>i64</td><td>u32</td></tr></thead><tbody><tr><td>1</td><td>609</td></tr><tr><td>0</td><td>391</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Group By\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      y    avg\n  <int>  <dbl>\n1     0 0.0621\n2     1 0.0270\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, .(avg = mean(x)), by = \"y\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y          avg\n   <int>        <num>\n1:     1 -0.009699608\n2:     0  0.003454121\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.groupby(\"y\")[\"x\"].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny\n0   -0.069581\n1    0.026025\nName: x, dtype: float64\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.group_by('y').agg(pl.col('x').mean())\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>x</th></tr><tr><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>0.026025</td></tr><tr><td>0</td><td>-0.069581</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Chain Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  group_by(y) |>\n  summarize(\n    avg = mean(x)\n  ) |>\n  filter(\n    y == 1\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n      y    avg\n  <int>  <dbl>\n1     1 0.0270\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_table[, \n  by = y,\n  .(avg = mean(x))\n  ][\n    y == 1\n  ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y          avg\n   <int>        <num>\n1:     1 -0.009699608\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_group = py_data.groupby(\"y\")[\"x\"].mean().reset_index()\n\npy_group.iloc[1:, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   y         x\n1  1  0.026025\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_group = pl_data.group_by('y').agg(pl.col('x').mean())\n\npl_group.filter(pl.col('y') == 1)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>x</th></tr><tr><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>0.026025</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n## Pivot Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_data |>\n  pivot_longer(\n    -y\n  ) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      y name    value\n  <int> <chr>   <dbl>\n1     1 x       0.678\n2     1 x2     -0.881\n3     1 x_mult -0.597\n4     1 x       0.740\n5     1 x2      1.67 \n6     1 x_mult  1.23 \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(melt(r_table, id.vars = \"y\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       y variable      value\n   <int>   <fctr>      <num>\n1:     1        x  0.0478488\n2:     1        x -0.1134272\n3:     1        x -0.2430403\n4:     1        x  0.1240982\n5:     1        x  0.3497546\n6:     0        x  0.1528183\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npy_data.melt(id_vars = ['y'], value_vars = ['x', 'x2', 'x_mult']).head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   y variable     value\n0  1        x  0.135675\n1  1        x -0.913936\n2  1        x -1.301978\n3  0        x -0.091329\n4  1        x  1.757646\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npl_data.unpivot(index = 'y').head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>y</th><th>variable</th><th>value</th></tr><tr><td>i64</td><td>str</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>&quot;x&quot;</td><td>0.135675</td></tr><tr><td>1</td><td>&quot;x&quot;</td><td>-0.913936</td></tr><tr><td>1</td><td>&quot;x&quot;</td><td>-1.301978</td></tr><tr><td>0</td><td>&quot;x&quot;</td><td>-0.091329</td></tr><tr><td>1</td><td>&quot;x&quot;</td><td>1.757646</td></tr></tbody></table></div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}