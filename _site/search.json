[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "!(cats_together.jpg)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi! I am Jonathan Andrew Pedroza PhD, but I have gotten used to everyone just referring to me as JP. I am a Data Scientist and Psychometrician for Accessible Teaching, Learning, and Assessment Systems (ATLAS) at the University of Kansas. I received my PhD in Prevention Science from the University of Oregon in 2021. My training as a Prevention Scientist included training in program evaluation, implementation science, machine learning, inferential statistics, and survey design. In addition to my work at ATLAS, I am also a Posit (Previously RStudio) Academy Mentor to cohorts around the world where I help cohort members with learning R while providing tips about additional packages and best practices using R and the Tidyverse.\nMy past research interests included the examination of physical activity, sedentary behaviors, and environmental factors that contribute to inequities of access and engagement in health behaviors. Currently my research interests are in using machine learning to draw attention to accessibility concerns for students with significant cognitive disabilities. Additional interests include creating visualizations to disseminate findings to a wide audience, including practitioners, other resaerchers, and state officials.\nMy main programming language is R; however, I am competent in using Python and have working knowledge of SQL, Stan, and Julia. When I am away from my computer, I enjoy EVERYTHING about coffee, hiking, cycling, and playing with my cats. Away from my computer I enjoy roasting and tasting different coffees, hiking, cycling, fishing, and playing with my cats. If you have any questions or requests for statistics/machine learning consultation, you can reach me on twitter or through email cpppedroza@gmail.com."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Posts",
    "section": "",
    "text": "Using Typst To Create Documents\n\n\n\nR\n\n\nTypst\n\n\n\n\n\n\n\n\n\n\nJul 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBayes Net Pt. 2\n\n\n\nbayesian\n\n\nbayesian network\n\n\nbayes net\n\n\nR\n\n\nstan\n\n\ncmdstanr\n\n\n\n\n\n\n\n\n\n\nMar 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBayes Nets Pt. 1\n\n\n\nbayesian\n\n\nbayesian network\n\n\nbayes net\n\n\nR\n\n\nstan\n\n\ncmdstanr\n\n\n\n\n\n\n\n\n\n\nMar 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProphet Model\n\n\n\nVisualizations\n\n\nAnalysis\n\n\nForecast\n\n\nTidyModels\n\n\nModeltime\n\n\n\n\n\n\n\n\n\n\nJun 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraduate Student Satisfaction Exit Surveys\n\n\n\nVisualizations\n\n\nShiny\n\n\n\n\n\n\n\n\n\n\nJun 19, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday Coffee Ratings\n\n\n\nVisualizations\n\n\nAnalysis\n\n\nTidy Tuesday\n\n\n\n\n\n\n\n\n\n\nMay 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTwitter Conference Presentation\n\n\n\nVisualizations\n\n\nAnalysis\n\n\n\n\n\n\n\n\n\n\nApr 30, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2022-06-02-prophet-model/index.html",
    "href": "posts/2022-06-02-prophet-model/index.html",
    "title": "Prophet Model",
    "section": "",
    "text": "As I start looking for non-academic positions, I wanted to practice forecasting as I didn’t really have much experience with these types of models. NOTE: This is for practicing forecasting skills and you should not trust this model with your own stocks. After plenty of reading,\nI finally have some understanding of how to utilize these models. This post started because even after a BA, 2 masters degrees, and a doctorate, my brother still has no clue what I do. He, along with most of my family think I am a Clinical Psychologist.\nSo for me to try and make my brother understand what I do, I thought I would show him with something that he has become interested with recently; stocks. So for this post, I’ll\nBelow are all the sites for the packages I used.\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(prophet)\nlibrary(lubridate)\nlibrary(modeltime)\nlibrary(timetk)"
  },
  {
    "objectID": "posts/2022-06-02-prophet-model/index.html#loading-data",
    "href": "posts/2022-06-02-prophet-model/index.html#loading-data",
    "title": "Prophet Model",
    "section": "Loading Data",
    "text": "Loading Data\nTo load the Google Finance data, I decided to pick a stock that my brother had, which in this case was JetBlue. A cool feature about Google Finance and Google Sheets is that you can use the following formula in a Google Sheet on the first cell of the first column =GOOGLEFINANCE(\"JBLU\", \"price\", DATE(2000,1,1), DATE(2025, 1, 1), \"DAILY\") and it will give you the date and stock closing values for whatever period you’d like. The example above provides Google financial data for JBLU or the abbreviation for JetBlue stock. It also provides the price of the stock from the first day that there is data on JetBlue stocks, which in this case is April 12th 2002. You can also choose the period of time for the stock prices. I decided to look at daily data.\nJetBlue Sheet\nHere I have a copy of my Google Sheet for JetBlue that I will use to train and test my Prophet model. Instead of having a .csv file on my local machine, I decided to keep this on Google Drive so that it constantly updates with the Google Finance function. This meant that I had to use the googlesheets4 package to load the data from a Google Sheet. I also changed the name and class of the date variable to make it a date variable instead of a date and time variable.\n\ngooglesheets4::gs4_deauth()\n\ntheme_set(theme_light())\n\njet &lt;- \n  googlesheets4::read_sheet(\"https://docs.google.com/spreadsheets/d/1SpRXsC3kXDaQLUfC6cPIOvsqxDF6updhgHRJeT8PTog/edit#gid=0\", sheet = 1, range = \"A1:B1000\") %&gt;% \n  janitor::clean_names() %&gt;%\n  mutate(ds = as_date(date))\n\n\nCleaning Up the Data\nBased on some visualizations below, I also decided to create some additional variables from the date variable. Specifically, I used lubridate's wday() function to create a new variable that gives you the actual day from the corresponding cell’s date. I also used the ts_clean_vec function from time_tk to clean for outliers in the stock price values. There are additional arguments for the function, like applying a Box-Cox transformation but that is for a multiplicative trend, which this model does not appear to fit since the variation in the outcome does not grow exponentially. I’ll also include 2002 as the reference year for the year variable and make sure that my data is arranged by date.\n\njetblue &lt;- jet %&gt;% \n  mutate(actual_day = wday(ds,\n                           label = TRUE),\n         clean = ts_clean_vec(close)) %&gt;% \n  separate(col = date,\n           into = c('year_num', 'month_num', 'day_num'),\n           sep = '-') %&gt;% \n  mutate(year_num = as.factor(year_num),\n         year_num = relevel(year_num, ref = '2002')) %&gt;% \n  separate(col = day_num,\n           into = c('day_num', 'drop'),\n           sep = ' ') %&gt;%\n  mutate(day_num = as.numeric(day_num),\n         month_num = as.factor(month_num)) %&gt;% \n  select(-drop) %&gt;% \n  arrange(ds)"
  },
  {
    "objectID": "posts/2022-06-02-prophet-model/index.html#visualizing-data",
    "href": "posts/2022-06-02-prophet-model/index.html#visualizing-data",
    "title": "Prophet Model",
    "section": "Visualizing Data",
    "text": "Visualizing Data\nStarting with some quick visualizations, we can see that the only area that there is a difference in the variation of the stock prices is in the beginning of 2020. I wonder what that could have been .\n\njetblue %&gt;% \n  group_by(year_num, month_num) %&gt;% \n  summarize(var_value = sd(close)^2) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(month_num, var_value)) + \n  geom_point() + \n  facet_wrap(vars(year_num))\n\n\n\n\nNext, we can look at the histograms for the outcome of interest. If we look at the histograms, we can see that there are potential outliers in the original stock prices data. We can also see that cleaning the variable removed the potential outliers.\n\nonly_numeric &lt;- jetblue %&gt;% \n  select(close, clean)\n\nmap2(only_numeric,\n     names(only_numeric),\n     ~ggplot(data = only_numeric,\n             aes(.x)) + \n       geom_histogram(color = 'white',\n                      fill = 'dodgerblue') +\n       geom_vline(xintercept = mean(.x) +\n                    sd(.x) +\n                    sd(.x) +\n                    sd(.x),\n                  color = 'red',\n                  size = 1.25,\n                  linetype = 2) + \n       geom_vline(xintercept = mean(.x) -\n                    sd(.x) -\n                    sd(.x) -\n                    sd(.x),\n                  color = 'red',\n                  size = 1.25,\n                  linetype = 2) + \n       labs(title = .y))\n\n$close\n\n\n\n\n\n\n$clean\n\n\n\n\n\nThere will also be a lot of use of the purrr package and the map functions, which are part of the tidyverse. We can also see that in the plot series visualization using modeltime's plot_time_series function, that the cleaned stock prices remove the outliers. So from here on out, I’ll be using the cleaned stock prices.\n\nmap2(only_numeric,\n     names(only_numeric),\n     ~only_numeric %&gt;% \n       plot_time_series(jetblue$ds,\n                        .x,\n                        .interactive = FALSE) + \n       labs(title = .y))\n\n$close\n\n\n\n\n\n\n$clean\n\n\n\n\n\nWe can also look for anomalies, or points that deviate from the trend. Using the plot_anomaly_diagnostics function from the modeltime package, I can see all the anomalies in the data. I also used ggplot to create my own visualization using the same data. Lastly, we’ll deal with those anomalies by removing them from the dataset. This is not too much of a problem because the Prophet model should be able to handle this fairly easy.\n\njetblue %&gt;% \n  plot_anomaly_diagnostics(ds,\n                           clean,\n                           .facet_ncol = 1,\n                           .interactive = FALSE)\n\n\n\njetblue %&gt;% \n  tk_anomaly_diagnostics(ds,\n                         clean) %&gt;% \n  ggplot(aes(ds, observed)) + \n  geom_line() + \n  geom_point(aes(color = anomaly)) +\n  viridis::scale_color_viridis(option = 'D',\n                               discrete = TRUE,\n                               begin = .5,\n                               end = 0)\n\n\n\nanomaly &lt;- jetblue %&gt;%\n  tk_anomaly_diagnostics(ds,\n                         clean)\n\njetblue &lt;- left_join(jetblue, anomaly) %&gt;%\n  filter(anomaly != 'Yes')\n\nWe can also look into additional regressors to include in the model by looking into seasonality. We can see some fluctuation in stock prices across the years. We’ll include the year variable as another regressor on the stock prices.\n\njetblue %&gt;% \n  plot_seasonal_diagnostics(ds,\n                            clean,\n                            .interactive = FALSE)"
  },
  {
    "objectID": "posts/2022-06-02-prophet-model/index.html#training-the-prophet-model",
    "href": "posts/2022-06-02-prophet-model/index.html#training-the-prophet-model",
    "title": "Prophet Model",
    "section": "Training the Prophet Model",
    "text": "Training the Prophet Model\nBefore we begin, I’m going to designate 10 cores to process any models run.\n\nset.seed(05262022)\n\nparallel::detectCores()\n\n[1] 8\n\nparallel_start(10,\n               .method = 'parallel')\n\nFirst, instead of the normal initial_split used for training and testing splits, we’ll use the initial_time_split function from tidymodels to separate the first 80% of the data into training set and the other 20% into the testing set.\n\nset.seed(05262022)\njet_split &lt;- initial_time_split(jetblue)\n\n\nProphet Model Function\nI decided to create my own Prophet function to be able to use for both training the model and testing it. In this function, I’ve also included parameters that can be changed to see if the model performs better or worse. Lastly, the train = TRUE allows us to practice with the training dataset and then when we’re happy with the model, we can use it to test our model. For our model, we’ll be predicting stock prices with date and comparing each year to the reference year (2002).\n\nprophet_mod &lt;- function(splits,\n                        changepoints = .05,\n                        seasonality = .01,\n                        holiday = .01,\n                        season_type = 'additive',\n                        day_season = 'auto',\n                        week_season = 'auto',\n                        year_season = 'auto',\n                        train = TRUE){\n  library(tidyverse)\n  library(tidymodels)\n  library(modeltime)\n  library(prophet)\n  \n  analy_data &lt;- analysis(splits)\n  assess_data &lt;- assessment(splits)\n  \n  model &lt;- prophet_reg() %&gt;% \n    set_engine(engine = 'prophet',\n               verbose = TRUE) %&gt;% \n    set_args(prior_scale_changepoints = changepoints,\n             prior_scale_seasonality = seasonality,\n             prior_scale_holidays = holiday,\n             season = season_type,\n             seasonality_daily = day_season,\n             seasonality_weekly = week_season,\n             seasonality_yearly = year_season) %&gt;% \n    fit(clean ~ ds + year_num, \n        data = analy_data)\n  \n  if(train == TRUE){\n    train_cali &lt;- model %&gt;% \n      modeltime_calibrate(new_data = analy_data)\n    \n    train_acc &lt;- train_cali %&gt;% \n      modeltime_accuracy()\n    \n    return(list(train_cali, train_acc))\n  }\n  \n  else{\n    test_cali &lt;- model %&gt;% \n      modeltime_calibrate(new_data = assess_data)\n    \n    test_acc &lt;- test_cali %&gt;% \n      modeltime_accuracy()\n    \n    return(list(test_cali, test_acc))\n  }\n}\n\nIt is worth noting that I’m using the modeltime package to run the prophet model because I believe it is easier to use (especially for later steps) than from Prophet but both can be implemented in this function. Let’s try running this model with the some random parameters I chose from the Prophet website until realizing that the modeltime parameters are log transformed.\n\nset.seed(05262022)\nbaseline &lt;- prophet_mod(jet_split,\n                 train = TRUE) %&gt;% \n  pluck(2)\n\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n\n\nConverting to Modeltime Table.\n\nbaseline\n\n# A tibble: 1 × 9\n  .model_id .model_desc           .type    mae  mape  mase smape  rmse   rsq\n      &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1         1 PROPHET W/ REGRESSORS Fitted 0.629  4.06  1.93  4.05 0.831 0.957\n\n\nSo with the model, we can see that the Mean Absolute Scaled Error (MASE) is 1.9270147 and the Root Mean Square Error (RMSE) is 0.8312475. Not bad for an initial run. Let’s look at how the model fits the training data.\n\nprophet_mod(jet_split,\n                 train = TRUE) %&gt;%  \n  pluck(1) %&gt;% \n  modeltime_forecast(new_data = training(jet_split),\n                     actual_data = jetblue) %&gt;% \n  plot_modeltime_forecast(.interactive = FALSE) +\n  labs(title = 'Prophet Baseline Model')\n\n\n\n\nSo the model appears to follow the trend line. We’ll try to tune some of these parameters to see if we can make the model better.\n\n\nTuning the Model\nNow, I’ll tune the prior scale values for the model. I’ll use the grid_latin_hypercube from the dials package in tidymodels to choose 5 sets of parameter values to run. I’m also using the rolling_origin from the rsample package in tidymodels because we are working with time series data. This does not create random samples but instead has samples with data points with consecutive values.\n\nset.seed(05262022)\n\nproph_model &lt;- prophet_reg() %&gt;%\n  set_engine(engine = 'prophet',\n             verbose = TRUE) %&gt;%\n  set_args(prior_scale_changepoints = tune(),\n           prior_scale_seasonality = tune(),\n           prior_scale_holidays = tune(),\n           season = 'additive',\n           seasonality_daily = 'auto',\n           seasonality_weekly = 'auto',\n           seasonality_yearly = 'auto')\n\nproph_rec &lt;-\n  recipe(clean ~ ds + year_num,\n         data = training(jet_split))\n\n\nset.seed(05262022)\ntrain_fold &lt;-\n  rolling_origin(training(jet_split),\n                 initial = 270,  \n                 assess = 90, \n                 skip = 30,\n                 cumulative = TRUE)\n\nset.seed(05262022)\ngrid_values &lt;-\n  grid_latin_hypercube(prior_scale_changepoints(),\n                       prior_scale_seasonality(),\n                       prior_scale_holidays(),\n                       size = 5)\n\nset.seed(05262022)\nproph_fit &lt;- tune_grid(object = proph_model,\n                       preprocessor = proph_rec,\n                       resamples = train_fold,\n                       grid = grid_values,\n                       control = control_grid(verbose = TRUE,\n                                              save_pred = TRUE,\n                                              allow_par = TRUE))\n\n\ntuned_metrics &lt;- collect_metrics(proph_fit)\ntuned_metrics %&gt;%\n  filter(.metric == 'rmse') %&gt;% \n  arrange(mean)\n\nsaveRDS(tuned_metrics,\n        file = 'tuned_metrics.rds')\n\n\nmetrics &lt;-\n  readr::read_rds('C:/Users/cpppe/Desktop/github_projects/log-of-jandp/posts/2022-06-02-prophet-model/tuned_metrics.rds')\n\nmetrics %&gt;% \n  filter(.metric == 'rmse') %&gt;% \n  arrange(mean)\n\n# A tibble: 5 × 9\n  prior_scale_changepoints prior_scale_seasonality prior_scale_holidays .metric\n                     &lt;dbl&gt;                   &lt;dbl&gt;                &lt;dbl&gt; &lt;chr&gt;  \n1                  3.53                    0.0170               1.12    rmse   \n2                  0.884                  36.4                  0.0131  rmse   \n3                  0.00139                 0.00166              0.00172 rmse   \n4                  0.0549                  0.261                0.231   rmse   \n5                 43.0                     3.80                12.2     rmse   \n# ℹ 5 more variables: .estimator &lt;chr&gt;, mean &lt;dbl&gt;, n &lt;int&gt;, std_err &lt;dbl&gt;,\n#   .config &lt;chr&gt;\n\n\nFor the sake of not waiting for this to render, I decided to make a RDS file of the metrics gathered from the tuned Prophet model. We can see that the RMSE value was 2.4252669 and the prior scale changepoint value was 3.5347457, the prior scale seasonality value was 0.0170306, and the prior scale holiday value was 1.1198542.\n\n\nFinal Training Model\nI then decided to run the prophet model on the training dataset with the new parameter values.\n\nfinal_train &lt;- prophet_mod(jet_split,\n                 changepoints = 3.53,\n                 seasonality = .017,\n                 holiday = 1.12,\n                 train = TRUE) %&gt;%  \n  pluck(2)\n\nfinal_train\n\n# A tibble: 1 × 9\n  .model_id .model_desc           .type    mae  mape  mase smape  rmse   rsq\n      &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1         1 PROPHET W/ REGRESSORS Fitted 0.501  3.24  1.54  3.23 0.659 0.973\n\nprophet_mod(jet_split,\n            changepoints = 3.53,\n            seasonality = .017,\n            holiday = 1.12,\n            train = TRUE) %&gt;%  \n  pluck(1) %&gt;% \n  modeltime_forecast(new_data = training(jet_split),\n                     actual_data = jetblue) %&gt;% \n  plot_modeltime_forecast(.interactive = FALSE) +\n  labs(title = 'JetBlue Stock Prices - Training Model')\n\n\n\n\nWe can see that when using the whole training set, we have a RMSE of 0.6588232 and a MASE of 1.5354125 so both metrics reduced slightly."
  },
  {
    "objectID": "posts/2022-06-02-prophet-model/index.html#testing-the-model",
    "href": "posts/2022-06-02-prophet-model/index.html#testing-the-model",
    "title": "Prophet Model",
    "section": "Testing the Model",
    "text": "Testing the Model\nFinally, let’s test our Prophet model to see how well the model fits.\n\nprophet_mod(jet_split,\n            changepoints = 3.53,\n            seasonality = .017,\n            holiday = 1.12,\n            train = FALSE) %&gt;%\n  pluck(1) %&gt;% \n  modeltime_forecast(new_data = testing(jet_split),\n                     actual_data = jetblue) %&gt;% \n  plot_modeltime_forecast(.interactive = FALSE) +\n  labs(title = 'JetBlue Stock Prices - Testing Model')\n\n\n\ntest_model &lt;- prophet_mod(jet_split,\n            changepoints = 3.53,\n            seasonality = .017,\n            holiday = 1.12,\n            train = FALSE) %&gt;%\n  pluck(2)\n\ntest_model\n\n# A tibble: 1 × 9\n  .model_id .model_desc           .type   mae  mape  mase smape  rmse    rsq\n      &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1         1 PROPHET W/ REGRESSORS Test   1.11  8.80  4.57  8.58  1.35 0.0196\n\n\nWell, that doesn’t look very good and we can see that with the metrics. The MASE has gotten much worse (4.5736587) and so has the RMSE (1.3542052)"
  },
  {
    "objectID": "posts/2022-06-02-prophet-model/index.html#forecasting-ahead-a-year",
    "href": "posts/2022-06-02-prophet-model/index.html#forecasting-ahead-a-year",
    "title": "Prophet Model",
    "section": "Forecasting Ahead a Year",
    "text": "Forecasting Ahead a Year\nWell our model did not fit well to the testing data, but let’s see how it model looks when refit to the full data and forecasted forward a year. So in a year, it seems that JetBlue stock will remain roughly around the same value. It is important to note that the confidence intervals are large and with 95% confidence that values could be between 52.49 and -28.39 (not possible), there is not much confidence that JetBlue stock prices will remain where they are now in a year.\n\nfuture &lt;- jetblue %&gt;% \n  future_frame(.length_out = '1 year', .bind_data = TRUE)\n\nfuture &lt;-\n  future %&gt;%\n  select(-year_num, -month_num, -day_num) %&gt;%\n  mutate(date2 = ds) %&gt;%\n  separate(col = date2,\n           into = c('year_num', 'month_num', 'day_num'),\n           sep = '-') %&gt;%\n  mutate(year_num = as.factor(year_num),\n         year_num = relevel(year_num, ref = '2002'),\n         month_num = as.factor(month_num),\n         day_num = as.numeric(day_num)) %&gt;% \n  arrange(ds)\n\nglimpse(future)\n\nRows: 1,357\nColumns: 17\n$ close         &lt;dbl&gt; 13.33, 13.40, 13.57, 13.36, 13.10, 12.93, 12.45, 12.56, …\n$ ds            &lt;date&gt; 2002-04-12, 2002-04-15, 2002-04-16, 2002-04-17, 2002-04…\n$ actual_day    &lt;ord&gt; Fri, Mon, Tue, Wed, Thu, Fri, Mon, Tue, Wed, Thu, Fri, M…\n$ clean         &lt;dbl&gt; 13.33, 13.40, 13.57, 13.36, 13.10, 12.93, 12.45, 12.56, …\n$ observed      &lt;dbl&gt; 13.33, 13.40, 13.57, 13.36, 13.10, 12.93, 12.45, 12.56, …\n$ season        &lt;dbl&gt; 0.017592887, 0.001065775, -0.001828751, -0.005043169, -0…\n$ trend         &lt;dbl&gt; 13.47847, 13.48774, 13.49702, 13.50629, 13.51556, 13.524…\n$ remainder     &lt;dbl&gt; -0.16606354, -0.08880934, 0.07481227, -0.14124623, -0.40…\n$ seasadj       &lt;dbl&gt; 13.31241, 13.39893, 13.57183, 13.36504, 13.11179, 12.912…\n$ remainder_l1  &lt;dbl&gt; -3.129268, -3.129268, -3.129268, -3.129268, -3.129268, -…\n$ remainder_l2  &lt;dbl&gt; 3.177322, 3.177322, 3.177322, 3.177322, 3.177322, 3.1773…\n$ anomaly       &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N…\n$ recomposed_l1 &lt;dbl&gt; 10.36680, 10.35954, 10.36592, 10.37198, 10.37451, 10.413…\n$ recomposed_l2 &lt;dbl&gt; 16.67339, 16.66613, 16.67251, 16.67857, 16.68110, 16.719…\n$ year_num      &lt;fct&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 20…\n$ month_num     &lt;fct&gt; 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 05, …\n$ day_num       &lt;dbl&gt; 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 29, 30, 1, 2…\n\ntest_model1 &lt;- prophet_mod(jet_split,\n            changepoints = 3.53,\n            seasonality = .017,\n            holiday = 1.12,\n            train = FALSE) %&gt;%\n  pluck(1)\n\ntest_model1 %&gt;% \n  modeltime_refit(data = future) %&gt;% \n  modeltime_forecast(new_data = future,\n                     actual_data = jetblue) %&gt;% \n  plot_modeltime_forecast(.interactive = FALSE) +\n  labs(title = 'Forecasted JetBlue Stock Prices')"
  },
  {
    "objectID": "posts/2024-03-09-bayesian-networks-pt-1/index.html",
    "href": "posts/2024-03-09-bayesian-networks-pt-1/index.html",
    "title": "Bayes Nets Pt. 1",
    "section": "",
    "text": "Under Development\nAs I am continuing to grow in understanding and conducting bayesian networks, this page and series may change in the future. -JP\nOkay, I will be the first to state that I am not an expert in the field of conducint bayeaian networks, bayesian analyses, statistics (the list goes on), but I have been struggling to find any blog posts about conducting a bayes net with latent variables that uses the programming language Stan. There are several tutorials on how to download Stan using either R or Python, so I will not be covering that. For this post, I will be doing all my programming in R, while calling on Stan to conduct the Markov Chain Monte Carlo (MCMC) sampling. Maybe a future post will follow this tutorial using Python and Stan. Additionally, I will be creating data that will represent educational assessment data, with latent variables representing proficiency in certain skills (e.g., math, English/language arts, and science) for students. While most of my experience of using bayes nets is to represent measurement models, bayes net can be used outside of this field. Bayes net is similar to path analysis and structural equation modeling; however, EXPLAIN DIFFERENCE BETWEEN THE TWO METHODS. I will also start referring to everything in this series in a bayesian network framework. For instance, instead of using variables, whether they are observed or unobserved (latent), I will be referring to them as nodes and latent nodes, respectively. When it comes to showing the “paths” between nodes, I wwill now be referring to them as edges. Lastly, any image that shows all of the nodes and the edges connecting to one another will be referred to as a directed acyclic graph or DAG.\nOkay, now on to this post. For this post I will simply discuss creating the data in R to be used in Stan, as well as creating the object of data that will be used in the Stan calculations. One last comment before diving in, I will be using cmdstanr instead of rstan for my Stan computations."
  },
  {
    "objectID": "posts/2024-03-09-bayesian-networks-pt-1/index.html#getting-the-data-set-up",
    "href": "posts/2024-03-09-bayesian-networks-pt-1/index.html#getting-the-data-set-up",
    "title": "Bayes Nets Pt. 1",
    "section": "Getting the Data Set Up",
    "text": "Getting the Data Set Up\n\nlibrary(tidyverse)\nlibrary(cmdstanr)\nlibrary(bayestestR)\nlibrary(bayesplot)\nlibrary(posterior)\n\nset.seed(12345)\nbern_dist &lt;- function(prob_value)(\n  rbinom(n = 1000, size = 1, prob = prob_value)\n)\n\ny &lt;- tibble(\n  y1 = bern_dist(prob = .8),\n  y2 = bern_dist(prob = .74),\n  y3 = bern_dist(prob = .88),\n  y4 = bern_dist(prob = .90),\n  y5 = bern_dist(prob = .64),\n  y6 = bern_dist(prob = .61),\n  y7 = bern_dist(prob = .79),\n  y8 = bern_dist(prob = .89),\n  y9 = bern_dist(prob = .81),\n  y10 = bern_dist(prob = .54),\n  y11 = bern_dist(prob = .60),\n  y12 = bern_dist(prob = .46),\n  y13 = bern_dist(prob = .37),\n  y14 = bern_dist(prob = .3),\n  y15 = bern_dist(prob = .65),\n) |&gt;\n  rowid_to_column() |&gt;\n  rename(\n    studentid = rowid\n  )\n\nThe first thing I am going to do is load in all the necessary libraries that you need. Then I decided to create a function that would create a binomial distribution with a single trial, so essentially a bernoulii distribution. I decided on some random numbers for the probabilities of correct responses to the 15 different items and decided to create some fake studentids for each row.\n\n\n\n\n\n\n\n\n\n\nI decided to create a simple table that shows all of the students and their responses for the 15 items in this assessment. I’m not sure why I have all the data in the table, but I used some pagination so there is not a laundry list of rows with 0s and 1s clogging up this post…hopefully.\n\n# map(y |&gt; select(-studentid), table)\n# map(y |&gt; select(-studentid), ~round(prop.table(table(.x)), 2))\n\nmap(y |&gt; select(-studentid), table)[[1]]\n\n\n  0   1 \n199 801 \n\n\nAfter seeing that the data looks correct, I am also neurotic and need to make sure that my created data is how I imagined it would be. So I looped through each of my items to make sure the proportions are correct. More importantly, I like to see the counts of the data and get an understanding of how many are answering each item correctly. I commented out the loop and am only going to show the counts for the first item. So seeing at how my function had approximately 80% of the students answering the item correctly, I can now see that 801 answered item 1 correctly.\n\nQ Matrix\n\nq_matrix &lt;- tibble(\n  item_id = map_chr(1:15, ~paste0(\"y\", .x)),\n  att1 = c(1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0),\n  att2 = c(0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0),\n  att3 = c(0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1)\n) \n\nq_matrix |&gt;\n  gt::gt() |&gt;\n  gt::opt_interactive(\n    use_filters = TRUE,\n    use_resizers = TRUE,\n    use_highlight = TRUE,\n    use_compact_mode = TRUE\n  )\n\n\n\n\n\n\n\n\n\nOkay, now on to the Q-matrix. This is the only other piece of information we may need for our model in Stan. WARNING I am creating this q-matrix to be as simple as possible. This means that in a realistic scenario, you would either want to use a structural learning algorithm to see what nodes have edges to our three latent nodes, or you should probably have experts on your latent attributes to declare what items measure what latent attribute.\nAbove, I created a q-matrix that follows a pattern where each attribute has 5 items that correspond to that attribute. The gt table above allows you to search which items correspond to each attribute by typing 1 into the filter bar above each column. So now I believe we have everything we need to get started on a bayes net using Stan and Markov chain Monte Carlo (MCMC) sampling.\n\n\nStan Data\n\nstan_data &lt;- list(\n  J = nrow(y[, -1]), # Number of students/rows\n  I = ncol(y[, -1]), # Number of items\n  K = ncol(q_matrix[, -1]), #Number of latent attributes/skills\n  y = y[,-1], # Student responses on all items\n  Q = q_matrix[,-1] # Items that measure each attribute\n)\n\nprint(stan_data)\nglimpse(stan_data)"
  },
  {
    "objectID": "posts/2024-03-16-bayes-net-part2-estimation/index.html",
    "href": "posts/2024-03-16-bayes-net-part2-estimation/index.html",
    "title": "Bayes Net Pt. 2",
    "section": "",
    "text": "As I am continuing to grow in understanding and conducting bayesian networks, this page and series may change in the future. -JP\n\nAppendix (Stan Code Sections Combined)\n\ndata {\n  int&lt;lower=1&gt; J; // # of respondents/students j\n  int&lt;lower=1&gt; I; // # of items i\n  int&lt;lower=1&gt; K; // # of attributes k\n  matrix[J, I] X; // response matrix x\n  matrix[I, K] Q; //Q matrix Q\n}\nparameters {\n  array[I] real&lt;lower=0, upper=1&gt; guess;\n  array[I] real&lt;lower=0, upper=1&gt; no_guess;\n  real&lt;lower=0, upper=1&gt; lambda1;\n  real&lt;lower=0, upper=1&gt; lambda20;\n  real&lt;lower=0, upper=1&gt; lambda21;\n  real&lt;lower=0, upper=1&gt; lambda30;\n  real&lt;lower=0, upper=1&gt; lambda31;\n  real&lt;lower=0, upper=1&gt; lambda40;\n  real&lt;lower=0, upper=1&gt; lambda41;\n  real&lt;lower=0, upper=1&gt; lambda50;\n  real&lt;lower=0, upper=1&gt; lambda51;\n}\ntransformed parameters {\n  array[J] real theta1;\n  array[J] real theta2;\n  array[J] real theta3;\n  array[J] real theta4;\n  array[J] real theta5;\n  matrix[J, I] delta;\n  array[I] real pi;\n  matrix[J, I] log_lik;\n  vector[I] ps_i = rep_vector(0, I); // Initialize ps_i with zeros\n  array[J] real ps_j;\n  \n  for (j in 1 : J) {\n    theta1[j] = lambda1 * 1 + (1 - lambda1) * (1 - 1);\n    theta2[j] = theta1[j] * lambda21 + (1 - theta1[j]) * lambda20;\n    theta3[j] = theta2[j] * lambda31 + (1 - theta2[j]) * lambda30;\n    theta4[j] = theta3[j] * lambda41 + (1 - theta3[j]) * lambda40;\n    theta5[j] = theta4[j] * lambda51 + (1 - theta4[j]) * lambda50;\n    \n    for (i in 1 : I) {\n      delta[j, i] = pow(theta1[j], Q[i, 1]) * pow(theta2[j], Q[i, 2])\n                    * pow(theta3[j], Q[i, 3]) * pow(theta4[j], Q[i, 4])\n                    * pow(theta5[j], Q[i, 5]);\n      \n      pi[i] = pow(guess[i], delta[j, i]) * pow(no_guess[i], 1 - delta[j, i]);\n      \n      log_lik[j, i] = X[j, i] * log(pi[i]) + (1 - X[j, i]) * log(1 - pi[i]);\n      \n      // Accumulate the values of log_lik over items\n      ps_i[i] = ps_i[i] + log_lik[j, i];\n    }\n    // Sum up the log_lik values for each student\n    ps_j[j] = sum(log_lik[j]);\n  }\n}\nmodel {\n  guess ~ beta(5, 25);\n  no_guess ~ beta(25, 5);\n  lambda1 ~ beta(34, 7);\n  lambda20 ~ beta(8, 36);\n  lambda21 ~ beta(36, 8);\n  lambda30 ~ beta(8, 26);\n  lambda31 ~ beta(26, 8);\n  lambda40 ~ beta(22, 28);\n  lambda41 ~ beta(28, 22);\n  lambda50 ~ beta(22, 22);\n  lambda51 ~ beta(22, 22);\n  \n  target += log_sum_exp(ps_j);\n}"
  },
  {
    "objectID": "posts/2024-07-02-resume-cover-letter-typst/index.html",
    "href": "posts/2024-07-02-resume-cover-letter-typst/index.html",
    "title": "Using Typst To Create Documents",
    "section": "",
    "text": "I was recently laid off due to budget cuts so it was a perfect type to dust off the ol’ resume and cover letter and tailor them for positions. I also recently have been using Typst, an awesome app for working on pdf files at the same time as colleagues. You could think of this as something similar to Google Docs or GitHub for code. This also got me thinking about creating a small series of blog posts about using Typst and then creating Typst templates for documents using Quarto. The latter topics would be using Quarto extensions and if following along, you would need Quarto version 1.4 at least to be able to use Typst code chunks on a Quarto document. So first, I will show the Typst file I will be using because let’s face it I’m on the job market and free publicity is always good.\n.\nHere is the link for the Typst resume to view. If you want, you can just copy and paste that into Typst and change the information. I will walk through each section of the document with Typst code in the post, as well as a cover letter post, and then end the series with a Quarto extension to create a Typst template so you can just write your resume and/or cover letter in Quarto."
  },
  {
    "objectID": "posts/2024-07-02-resume-cover-letter-typst/index.html#typst-documentation",
    "href": "posts/2024-07-02-resume-cover-letter-typst/index.html#typst-documentation",
    "title": "Using Typst To Create Documents",
    "section": "Typst Documentation",
    "text": "Typst Documentation\nI will be the first to state that Typst documentation is a little difficult to follow at first. Hopefully with this tutorial you will get a better understanding of the basics of Typst code. As someone who tried to learn LaTeX to edit the previous resume I had found a template for, I wish Typst existed earlier."
  },
  {
    "objectID": "posts/2024-07-02-resume-cover-letter-typst/index.html#creating-a-typst-document",
    "href": "posts/2024-07-02-resume-cover-letter-typst/index.html#creating-a-typst-document",
    "title": "Using Typst To Create Documents",
    "section": "Creating a Typst Document",
    "text": "Creating a Typst Document\nWorking in the Typst app is pretty straightforward with you creating a username, followed by your dashboard with nothing there. This will be the location of all of your documents as you get started with Typst. While there are Typst templates already for resumes I really wanted to create something similar to the resume I had in LaTeX. Working in Quarto, you will have to learn how to create Typst code chunks. They are slightly different from other languages’ code chunks but you can still use all of the Quarto code chunk arguments.\nFrom what I have seen online, there does not seem to be much difference in the ordering of some of the beginning Typst documentation. I have decided to start my Typst document with any variables I will be including, followed by any Typst packages I will need, and then setting up the general parameters for the document. These general parameters are for the document overall. Things like setting the font to a specific font, size and maybe weight would be a good parameter to set at the top of your document."
  },
  {
    "objectID": "posts/2024-07-02-resume-cover-letter-typst/index.html#breakdown-of-variables-packages-and-set-function-for-parameters",
    "href": "posts/2024-07-02-resume-cover-letter-typst/index.html#breakdown-of-variables-packages-and-set-function-for-parameters",
    "title": "Using Typst To Create Documents",
    "section": "Breakdown of Variables, Packages, and # Set function for parameters",
    "text": "Breakdown of Variables, Packages, and # Set function for parameters\n\n//Variables\n#let name = [Jonathan A. Pedroza Ph.D]\n\n//Packages\n#import \"@preview/tablex:0.0.8\": tablex\n#import \"lib-gen.typ\": *\n#import \"lib-impl.typ\": *\n#import \"lib.typ\": *\n\n#set page(\n  margin: (\n    top: 0cm,\n    bottom: 0cm,\n    left: .5cm,\n    right: 0cm\n  )\n)\n\n#set block(spacing: 0.5em)\n\n#set rect(\n  width: 37%,\n  height: 100%\n)\n\nAbove is the beginning Typst code for the resume I created. I’m going to walk through the code a little, but for more detailed information, check out the help documentation. The // syntax can be included wherever to include comments. Since I have been showing others how to use Typst to create quick pretty PDFs, I have been including a lot of comments for things like variables. To create variables in Typst, you will need to use the #let function followed by your variable name, an equal sign, and the information you want to include. So I created the variable name, which would be used as #name in Typst and the document will spell out my full name. After that, just as the comment states, I included the tablex package, which I have found to be useful for creating tables and grids. If you’d like you can use the #table or #grid functions from Typst. Additionally, I also included the files for using the FontAwesome Typst package. You can find all the icons and other information about FontAwesome at the FontAwesome website. I was just being lazy as I wanted to create my resume quick so I could get it out into the world ASAP. Next I set the margins to maximize the amount of space I would have for my resume and I created a block after the titles Education and Professional Experience since I did not want the default amount of space before my education and experience entries. Lastly, I set a rectangle for 37% of the document’s width and 100% of the height. There are other metrics that can be used to create the rectangle but I personally was enjoying using percentages for this document."
  }
]